
AdcMfcDb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db4  08004db4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004db4  08004db4  00014db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dbc  08004dbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dc0  08004dc0  00014dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000150  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d445  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002509  00000000  00000000  0002d4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  0002f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000910  00000000  00000000  00030418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259f8  00000000  00000000  00030d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebf6  00000000  00000000  00056720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e47e4  00000000  00000000  00065316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149afa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ad8  00000000  00000000  00149b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004d38 	.word	0x08004d38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004d38 	.word	0x08004d38

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005a8:	4a28      	ldr	r2, [pc, #160]	; (800064c <MX_ADC1_Init+0xb8>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005bc:	2201      	movs	r2, #1
 80005be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c6:	4b20      	ldr	r3, [pc, #128]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ce:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <MX_ADC1_Init+0xbc>)
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005da:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005f6:	f000 fc75 	bl	8000ee4 <HAL_ADC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000600:	f000 fa23 	bl	8000a4a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000604:	2303      	movs	r3, #3
 8000606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800060c:	2304      	movs	r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <MX_ADC1_Init+0xb4>)
 8000616:	f000 fdd7 	bl	80011c8 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000620:	f000 fa13 	bl	8000a4a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000624:	230a      	movs	r3, #10
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_ADC1_Init+0xb4>)
 8000632:	f000 fdc9 	bl	80011c8 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800063c:	f000 fa05 	bl	8000a4a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000008c 	.word	0x2000008c
 800064c:	40012000 	.word	0x40012000
 8000650:	0f000001 	.word	0x0f000001

08000654 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a3c      	ldr	r2, [pc, #240]	; (8000764 <HAL_ADC_MspInit+0x110>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d171      	bne.n	800075a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <HAL_ADC_MspInit+0x114>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	4a3a      	ldr	r2, [pc, #232]	; (8000768 <HAL_ADC_MspInit+0x114>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000684:	6453      	str	r3, [r2, #68]	; 0x44
 8000686:	4b38      	ldr	r3, [pc, #224]	; (8000768 <HAL_ADC_MspInit+0x114>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b34      	ldr	r3, [pc, #208]	; (8000768 <HAL_ADC_MspInit+0x114>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a33      	ldr	r2, [pc, #204]	; (8000768 <HAL_ADC_MspInit+0x114>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b31      	ldr	r3, [pc, #196]	; (8000768 <HAL_ADC_MspInit+0x114>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <HAL_ADC_MspInit+0x114>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a2c      	ldr	r2, [pc, #176]	; (8000768 <HAL_ADC_MspInit+0x114>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <HAL_ADC_MspInit+0x114>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ca:	2301      	movs	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ce:	2303      	movs	r3, #3
 80006d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4823      	ldr	r0, [pc, #140]	; (800076c <HAL_ADC_MspInit+0x118>)
 80006de:	f001 fd37 	bl	8002150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006e2:	2308      	movs	r3, #8
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	481e      	ldr	r0, [pc, #120]	; (8000770 <HAL_ADC_MspInit+0x11c>)
 80006f6:	f001 fd2b 	bl	8002150 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <HAL_ADC_MspInit+0x120>)
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <HAL_ADC_MspInit+0x124>)
 80006fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000718:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800071c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000720:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000724:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000728:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800072c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000730:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000740:	f001 f904 	bl	800194c <HAL_DMA_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800074a:	f000 f97e 	bl	8000a4a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000752:	639a      	str	r2, [r3, #56]	; 0x38
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40012000 	.word	0x40012000
 8000768:	40023800 	.word	0x40023800
 800076c:	40020800 	.word	0x40020800
 8000770:	40020000 	.word	0x40020000
 8000774:	200000d4 	.word	0x200000d4
 8000778:	40026410 	.word	0x40026410

0800077c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_DMA_Init+0x3c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <MX_DMA_Init+0x3c>)
 800078c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_DMA_Init+0x3c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2038      	movs	r0, #56	; 0x38
 80007a4:	f001 f89b 	bl	80018de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a8:	2038      	movs	r0, #56	; 0x38
 80007aa:	f001 f8b4 	bl	8001916 <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <MX_GPIO_Init+0xf4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a35      	ldr	r2, [pc, #212]	; (80008b0 <MX_GPIO_Init+0xf4>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <MX_GPIO_Init+0xf4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <MX_GPIO_Init+0xf4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a2e      	ldr	r2, [pc, #184]	; (80008b0 <MX_GPIO_Init+0xf4>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <MX_GPIO_Init+0xf4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_GPIO_Init+0xf4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a27      	ldr	r2, [pc, #156]	; (80008b0 <MX_GPIO_Init+0xf4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <MX_GPIO_Init+0xf4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_GPIO_Init+0xf4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <MX_GPIO_Init+0xf4>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_GPIO_Init+0xf4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f244 0181 	movw	r1, #16513	; 0x4081
 8000848:	481a      	ldr	r0, [pc, #104]	; (80008b4 <MX_GPIO_Init+0xf8>)
 800084a:	f001 fe2d 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800084e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <MX_GPIO_Init+0xf8>)
 8000868:	f001 fc72 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800086c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000872:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_GPIO_Init+0xfc>)
 8000884:	f001 fc64 	bl	8002150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2017      	movs	r0, #23
 800088e:	f001 f826 	bl	80018de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000892:	2017      	movs	r0, #23
 8000894:	f001 f83f 	bl	8001916 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2028      	movs	r0, #40	; 0x28
 800089e:	f001 f81e 	bl	80018de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a2:	2028      	movs	r0, #40	; 0x28
 80008a4:	f001 f837 	bl	8001916 <HAL_NVIC_EnableIRQ>

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40020800 	.word	0x40020800

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f000 fa7a 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f844 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c8:	f7ff ff78 	bl	80007bc <MX_GPIO_Init>
  MX_RTC_Init();
 80008cc:	f000 f8c2 	bl	8000a54 <MX_RTC_Init>
  MX_DMA_Init();
 80008d0:	f7ff ff54 	bl	800077c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80008d4:	f000 f9cc 	bl	8000c70 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80008d8:	f7ff fe5c 	bl	8000594 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, potentiometer, 2);
 80008dc:	2202      	movs	r2, #2
 80008de:	4916      	ldr	r1, [pc, #88]	; (8000938 <main+0x7c>)
 80008e0:	4816      	ldr	r0, [pc, #88]	; (800093c <main+0x80>)
 80008e2:	f000 fb43 	bl	8000f6c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  memset(uart_buf, 0, sizeof(uart_buf));
 80008e6:	2207      	movs	r2, #7
 80008e8:	2100      	movs	r1, #0
 80008ea:	4815      	ldr	r0, [pc, #84]	; (8000940 <main+0x84>)
 80008ec:	f003 fdae 	bl	800444c <memset>
	  sprintf(uart_buf, "PA%04d\n", potentiometer[0]);
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <main+0x7c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4913      	ldr	r1, [pc, #76]	; (8000944 <main+0x88>)
 80008f8:	4811      	ldr	r0, [pc, #68]	; (8000940 <main+0x84>)
 80008fa:	f003 fdaf 	bl	800445c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buf, sizeof(uart_buf), 10);
 80008fe:	230a      	movs	r3, #10
 8000900:	2207      	movs	r2, #7
 8000902:	490f      	ldr	r1, [pc, #60]	; (8000940 <main+0x84>)
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <main+0x8c>)
 8000906:	f002 fdb0 	bl	800346a <HAL_UART_Transmit>


	  memset(uart_buf, 0, sizeof(uart_buf));
 800090a:	2207      	movs	r2, #7
 800090c:	2100      	movs	r1, #0
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <main+0x84>)
 8000910:	f003 fd9c 	bl	800444c <memset>
	  sprintf(uart_buf, "PB%04d\n", potentiometer[1]);
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <main+0x7c>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	461a      	mov	r2, r3
 800091a:	490c      	ldr	r1, [pc, #48]	; (800094c <main+0x90>)
 800091c:	4808      	ldr	r0, [pc, #32]	; (8000940 <main+0x84>)
 800091e:	f003 fd9d 	bl	800445c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buf, sizeof(uart_buf), 10);
 8000922:	230a      	movs	r3, #10
 8000924:	2207      	movs	r2, #7
 8000926:	4906      	ldr	r1, [pc, #24]	; (8000940 <main+0x84>)
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <main+0x8c>)
 800092a:	f002 fd9e 	bl	800346a <HAL_UART_Transmit>

	  HAL_Delay(10);
 800092e:	200a      	movs	r0, #10
 8000930:	f000 fab4 	bl	8000e9c <HAL_Delay>
	  memset(uart_buf, 0, sizeof(uart_buf));
 8000934:	e7d7      	b.n	80008e6 <main+0x2a>
 8000936:	bf00      	nop
 8000938:	20000134 	.word	0x20000134
 800093c:	2000008c 	.word	0x2000008c
 8000940:	2000013c 	.word	0x2000013c
 8000944:	08004d50 	.word	0x08004d50
 8000948:	20000168 	.word	0x20000168
 800094c:	08004d58 	.word	0x08004d58

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	; 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	; 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fd74 	bl	800444c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <SystemClock_Config+0xdc>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a2b      	ldr	r2, [pc, #172]	; (8000a2c <SystemClock_Config+0xdc>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <SystemClock_Config+0xdc>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <SystemClock_Config+0xe0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <SystemClock_Config+0xe0>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <SystemClock_Config+0xe0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80009ac:	2306      	movs	r3, #6
 80009ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b4:	2301      	movs	r3, #1
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b8:	2310      	movs	r3, #16
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009bc:	2302      	movs	r3, #2
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009c4:	2308      	movs	r3, #8
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009c8:	23b4      	movs	r3, #180	; 0xb4
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 0320 	add.w	r3, r7, #32
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fde7 	bl	80025ac <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009e4:	f000 f831 	bl	8000a4a <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009e8:	f001 fd90 	bl	800250c <HAL_PWREx_EnableOverDrive>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009f2:	f000 f82a 	bl	8000a4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	230f      	movs	r3, #15
 80009f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2302      	movs	r3, #2
 80009fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	2105      	movs	r1, #5
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 f841 	bl	8002a9c <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a20:	f000 f813 	bl	8000a4a <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3750      	adds	r7, #80	; 0x50
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80fb      	strh	r3, [r7, #6]
//		HAL_UART_Transmit(&huart3, (uint8_t*)uart_buf, sizeof(uart_buf), 10);
//
//	}


}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4e:	b672      	cpsid	i
}
 8000a50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <Error_Handler+0x8>

08000a54 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_RTC_Init+0x44>)
 8000a5a:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <MX_RTC_Init+0x48>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_RTC_Init+0x44>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_RTC_Init+0x44>)
 8000a66:	227f      	movs	r2, #127	; 0x7f
 8000a68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_RTC_Init+0x44>)
 8000a6c:	22ff      	movs	r2, #255	; 0xff
 8000a6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_RTC_Init+0x44>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_RTC_Init+0x44>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_RTC_Init+0x44>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_RTC_Init+0x44>)
 8000a84:	f002 fbaa 	bl	80031dc <HAL_RTC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a8e:	f7ff ffdc 	bl	8000a4a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000144 	.word	0x20000144
 8000a9c:	40002800 	.word	0x40002800

08000aa0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	2230      	movs	r2, #48	; 0x30
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 fccb 	bl	800444c <memset>
  if(rtcHandle->Instance==RTC)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <HAL_RTC_MspInit+0x4c>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d111      	bne.n	8000ae4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 f9c4 	bl	8002e5c <HAL_RCCEx_PeriphCLKConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000ada:	f7ff ffb6 	bl	8000a4a <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <HAL_RTC_MspInit+0x50>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3738      	adds	r7, #56	; 0x38
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40002800 	.word	0x40002800
 8000af0:	42470e3c 	.word	0x42470e3c

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f964 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8000b9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ba0:	f001 fc9c 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <USART3_IRQHandler+0x10>)
 8000bae:	f002 fcef 	bl	8003590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000168 	.word	0x20000168

08000bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8000bc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bc4:	f001 fc8a 	bl	80024dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <DMA2_Stream0_IRQHandler+0x10>)
 8000bd2:	f001 f853 	bl	8001c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000d4 	.word	0x200000d4

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f003 fbf2 	bl	80043f8 <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20030000 	.word	0x20030000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	20000164 	.word	0x20000164
 8000c48:	200001c0 	.word	0x200001c0

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <MX_USART3_UART_Init+0x50>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000ca8:	f002 fb92 	bl	80033d0 <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cb2:	f7ff feca 	bl	8000a4a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000168 	.word	0x20000168
 8000cc0:	40004800 	.word	0x40004800

08000cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0x94>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d134      	bne.n	8000d50 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d30:	2307      	movs	r3, #7
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_UART_MspInit+0x9c>)
 8000d3c:	f001 fa08 	bl	8002150 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2027      	movs	r0, #39	; 0x27
 8000d46:	f000 fdca 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d4a:	2027      	movs	r0, #39	; 0x27
 8000d4c:	f000 fde3 	bl	8001916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	; 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40004800 	.word	0x40004800
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020c00 	.word	0x40020c00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6a:	490e      	ldr	r1, [pc, #56]	; (8000da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d80:	4c0b      	ldr	r4, [pc, #44]	; (8000db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d8e:	f7ff ff5d 	bl	8000c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f003 fb37 	bl	8004404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fd91 	bl	80008bc <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000da8:	08004dc4 	.word	0x08004dc4
  ldr r2, =_sbss
 8000dac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000db0:	200001c0 	.word	0x200001c0

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 fd71 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe82 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fd89 	bl	8001932 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 fd51 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200001ac 	.word	0x200001ac

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200001ac 	.word	0x200001ac

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_Delay+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e033      	b.n	8000f62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fba6 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d118      	bne.n	8000f54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f2a:	f023 0302 	bic.w	r3, r3, #2
 8000f2e:	f043 0202 	orr.w	r2, r3, #2
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 fa78 	bl	800142c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f023 0303 	bic.w	r3, r3, #3
 8000f4a:	f043 0201 	orr.w	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
 8000f52:	e001      	b.n	8000f58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <HAL_ADC_Start_DMA+0x1e>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e0e9      	b.n	800115e <HAL_ADC_Start_DMA+0x1f2>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d018      	beq.n	8000fd2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fb0:	4b6d      	ldr	r3, [pc, #436]	; (8001168 <HAL_ADC_Start_DMA+0x1fc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a6d      	ldr	r2, [pc, #436]	; (800116c <HAL_ADC_Start_DMA+0x200>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	0c9a      	lsrs	r2, r3, #18
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000fc4:	e002      	b.n	8000fcc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f9      	bne.n	8000fc6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fe0:	d107      	bne.n	8000ff2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ff0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	f040 80a1 	bne.w	8001144 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800100a:	f023 0301 	bic.w	r3, r3, #1
 800100e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800102c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001040:	d106      	bne.n	8001050 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f023 0206 	bic.w	r2, r3, #6
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
 800104e:	e002      	b.n	8001056 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2200      	movs	r2, #0
 8001054:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <HAL_ADC_Start_DMA+0x204>)
 8001060:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001066:	4a43      	ldr	r2, [pc, #268]	; (8001174 <HAL_ADC_Start_DMA+0x208>)
 8001068:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106e:	4a42      	ldr	r2, [pc, #264]	; (8001178 <HAL_ADC_Start_DMA+0x20c>)
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001076:	4a41      	ldr	r2, [pc, #260]	; (800117c <HAL_ADC_Start_DMA+0x210>)
 8001078:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001082:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001092:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	334c      	adds	r3, #76	; 0x4c
 80010ae:	4619      	mov	r1, r3
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f000 fcf8 	bl	8001aa8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d12a      	bne.n	800111a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a2d      	ldr	r2, [pc, #180]	; (8001180 <HAL_ADC_Start_DMA+0x214>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d015      	beq.n	80010fa <HAL_ADC_Start_DMA+0x18e>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a2c      	ldr	r2, [pc, #176]	; (8001184 <HAL_ADC_Start_DMA+0x218>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d105      	bne.n	80010e4 <HAL_ADC_Start_DMA+0x178>
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <HAL_ADC_Start_DMA+0x204>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00a      	beq.n	80010fa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a27      	ldr	r2, [pc, #156]	; (8001188 <HAL_ADC_Start_DMA+0x21c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d136      	bne.n	800115c <HAL_ADC_Start_DMA+0x1f0>
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <HAL_ADC_Start_DMA+0x204>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d130      	bne.n	800115c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d129      	bne.n	800115c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	e020      	b.n	800115c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a18      	ldr	r2, [pc, #96]	; (8001180 <HAL_ADC_Start_DMA+0x214>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d11b      	bne.n	800115c <HAL_ADC_Start_DMA+0x1f0>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d114      	bne.n	800115c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	e00b      	b.n	800115c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f043 0210 	orr.w	r2, r3, #16
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001154:	f043 0201 	orr.w	r2, r3, #1
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000000 	.word	0x20000000
 800116c:	431bde83 	.word	0x431bde83
 8001170:	40012300 	.word	0x40012300
 8001174:	08001625 	.word	0x08001625
 8001178:	080016df 	.word	0x080016df
 800117c:	080016fb 	.word	0x080016fb
 8001180:	40012000 	.word	0x40012000
 8001184:	40012100 	.word	0x40012100
 8001188:	40012200 	.word	0x40012200

0800118c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_ADC_ConfigChannel+0x1c>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e113      	b.n	800140c <HAL_ADC_ConfigChannel+0x244>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b09      	cmp	r3, #9
 80011f2:	d925      	bls.n	8001240 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68d9      	ldr	r1, [r3, #12]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	3b1e      	subs	r3, #30
 800120a:	2207      	movs	r2, #7
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43da      	mvns	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	400a      	ands	r2, r1
 8001218:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68d9      	ldr	r1, [r3, #12]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	4603      	mov	r3, r0
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4403      	add	r3, r0
 8001232:	3b1e      	subs	r3, #30
 8001234:	409a      	lsls	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	e022      	b.n	8001286 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6919      	ldr	r1, [r3, #16]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	2207      	movs	r2, #7
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	400a      	ands	r2, r1
 8001262:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6919      	ldr	r1, [r3, #16]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	4603      	mov	r3, r0
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4403      	add	r3, r0
 800127c:	409a      	lsls	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b06      	cmp	r3, #6
 800128c:	d824      	bhi.n	80012d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	3b05      	subs	r3, #5
 80012a0:	221f      	movs	r2, #31
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	3b05      	subs	r3, #5
 80012ca:	fa00 f203 	lsl.w	r2, r0, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
 80012d6:	e04c      	b.n	8001372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	d824      	bhi.n	800132a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b23      	subs	r3, #35	; 0x23
 80012f2:	221f      	movs	r2, #31
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43da      	mvns	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	400a      	ands	r2, r1
 8001300:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	3b23      	subs	r3, #35	; 0x23
 800131c:	fa00 f203 	lsl.w	r2, r0, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	631a      	str	r2, [r3, #48]	; 0x30
 8001328:	e023      	b.n	8001372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	3b41      	subs	r3, #65	; 0x41
 800133c:	221f      	movs	r2, #31
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b41      	subs	r3, #65	; 0x41
 8001366:	fa00 f203 	lsl.w	r2, r0, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <HAL_ADC_ConfigChannel+0x250>)
 8001374:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a28      	ldr	r2, [pc, #160]	; (800141c <HAL_ADC_ConfigChannel+0x254>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d10f      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1d8>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b12      	cmp	r3, #18
 8001386:	d10b      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_ADC_ConfigChannel+0x254>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d12b      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x23a>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <HAL_ADC_ConfigChannel+0x258>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d003      	beq.n	80013bc <HAL_ADC_ConfigChannel+0x1f4>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b11      	cmp	r3, #17
 80013ba:	d122      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <HAL_ADC_ConfigChannel+0x258>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d111      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_ADC_ConfigChannel+0x25c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a11      	ldr	r2, [pc, #68]	; (8001428 <HAL_ADC_ConfigChannel+0x260>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	0c9a      	lsrs	r2, r3, #18
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f4:	e002      	b.n	80013fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f9      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40012300 	.word	0x40012300
 800141c:	40012000 	.word	0x40012000
 8001420:	10000012 	.word	0x10000012
 8001424:	20000000 	.word	0x20000000
 8001428:	431bde83 	.word	0x431bde83

0800142c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001434:	4b79      	ldr	r3, [pc, #484]	; (800161c <ADC_Init+0x1f0>)
 8001436:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	431a      	orrs	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	021a      	lsls	r2, r3, #8
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6899      	ldr	r1, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014be:	4a58      	ldr	r2, [pc, #352]	; (8001620 <ADC_Init+0x1f4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d022      	beq.n	800150a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6899      	ldr	r1, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6899      	ldr	r1, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e00f      	b.n	800152a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001528:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0202 	bic.w	r2, r2, #2
 8001538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6899      	ldr	r1, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7e1b      	ldrb	r3, [r3, #24]
 8001544:	005a      	lsls	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01b      	beq.n	8001590 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001566:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001576:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6859      	ldr	r1, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	3b01      	subs	r3, #1
 8001584:	035a      	lsls	r2, r3, #13
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	e007      	b.n	80015a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	051a      	lsls	r2, r3, #20
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6899      	ldr	r1, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015e2:	025a      	lsls	r2, r3, #9
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6899      	ldr	r1, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	029a      	lsls	r2, r3, #10
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	609a      	str	r2, [r3, #8]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40012300 	.word	0x40012300
 8001620:	0f000001 	.word	0x0f000001

08001624 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001630:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800163a:	2b00      	cmp	r3, #0
 800163c:	d13c      	bne.n	80016b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d12b      	bne.n	80016b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800165c:	2b00      	cmp	r3, #0
 800165e:	d127      	bne.n	80016b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001678:	2b00      	cmp	r3, #0
 800167a:	d119      	bne.n	80016b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0220 	bic.w	r2, r2, #32
 800168a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f043 0201 	orr.w	r2, r3, #1
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff fd6b 	bl	800118c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016b6:	e00e      	b.n	80016d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff fd75 	bl	80011b4 <HAL_ADC_ErrorCallback>
}
 80016ca:	e004      	b.n	80016d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	4798      	blx	r3
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7ff fd57 	bl	80011a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001706:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f043 0204 	orr.w	r2, r3, #4
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff fd4a 	bl	80011b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175a:	4a04      	ldr	r2, [pc, #16]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <__NVIC_GetPriorityGrouping+0x18>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f003 0307 	and.w	r3, r3, #7
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	2b00      	cmp	r3, #0
 800179c:	db0b      	blt.n	80017b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	4907      	ldr	r1, [pc, #28]	; (80017c4 <__NVIC_EnableIRQ+0x38>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	2001      	movs	r0, #1
 80017ae:	fa00 f202 	lsl.w	r2, r0, r2
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e100 	.word	0xe000e100

080017c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	; (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	; (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	; 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
         );
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	; 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff8e 	bl	80017c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff29 	bl	8001728 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff3e 	bl	8001770 <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff8e 	bl	800181c <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5d 	bl	80017c8 <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff31 	bl	800178c <__NVIC_EnableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffa2 	bl	8001884 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff fa94 	bl	8000e84 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e099      	b.n	8001a9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001988:	e00f      	b.n	80019aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800198a:	f7ff fa7b 	bl	8000e84 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b05      	cmp	r3, #5
 8001996:	d908      	bls.n	80019aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e078      	b.n	8001a9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e8      	bne.n	800198a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <HAL_DMA_Init+0x158>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d107      	bne.n	8001a14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f023 0307 	bic.w	r3, r3, #7
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d117      	bne.n	8001a6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00e      	beq.n	8001a6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fb01 	bl	8002058 <DMA_CheckFifoParam>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e016      	b.n	8001a9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fab8 	bl	8001fec <DMA_CalcBaseAndBitshift>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	223f      	movs	r2, #63	; 0x3f
 8001a86:	409a      	lsls	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	f010803f 	.word	0xf010803f

08001aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_DMA_Start_IT+0x26>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e040      	b.n	8001b50 <HAL_DMA_Start_IT+0xa8>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d12f      	bne.n	8001b42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fa4a 	bl	8001f90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	223f      	movs	r2, #63	; 0x3f
 8001b02:	409a      	lsls	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0216 	orr.w	r2, r2, #22
 8001b16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0208 	orr.w	r2, r2, #8
 8001b2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e005      	b.n	8001b4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b66:	f7ff f98d 	bl	8000e84 <HAL_GetTick>
 8001b6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d008      	beq.n	8001b8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e052      	b.n	8001c30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0216 	bic.w	r2, r2, #22
 8001b98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ba8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d103      	bne.n	8001bba <HAL_DMA_Abort+0x62>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0208 	bic.w	r2, r2, #8
 8001bc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bda:	e013      	b.n	8001c04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bdc:	f7ff f952 	bl	8000e84 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d90c      	bls.n	8001c04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2220      	movs	r2, #32
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e015      	b.n	8001c30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1e4      	bne.n	8001bdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	223f      	movs	r2, #63	; 0x3f
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d004      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00c      	b.n	8001c70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2205      	movs	r2, #5
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c88:	4b8e      	ldr	r3, [pc, #568]	; (8001ec4 <HAL_DMA_IRQHandler+0x248>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a8e      	ldr	r2, [pc, #568]	; (8001ec8 <HAL_DMA_IRQHandler+0x24c>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0a9b      	lsrs	r3, r3, #10
 8001c94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01a      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0204 	bic.w	r2, r2, #4
 8001cce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	2201      	movs	r2, #1
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d012      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f043 0202 	orr.w	r2, r3, #2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	2204      	movs	r2, #4
 8001d24:	409a      	lsls	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d012      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	2204      	movs	r2, #4
 8001d42:	409a      	lsls	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2210      	movs	r2, #16
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d043      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03c      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d76:	2210      	movs	r2, #16
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d018      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d108      	bne.n	8001dac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d024      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	4798      	blx	r3
 8001daa:	e01f      	b.n	8001dec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
 8001dbc:	e016      	b.n	8001dec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0208 	bic.w	r2, r2, #8
 8001dda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2220      	movs	r2, #32
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 808f 	beq.w	8001f1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8087 	beq.w	8001f1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2220      	movs	r2, #32
 8001e14:	409a      	lsls	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d136      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0216 	bic.w	r2, r2, #22
 8001e34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <HAL_DMA_IRQHandler+0x1da>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0208 	bic.w	r2, r2, #8
 8001e64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	223f      	movs	r2, #63	; 0x3f
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d07e      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
        }
        return;
 8001e92:	e079      	b.n	8001f88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d01d      	beq.n	8001ede <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10d      	bne.n	8001ecc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d031      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
 8001ec0:	e02c      	b.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
 8001edc:	e01e      	b.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10f      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0210 	bic.w	r2, r2, #16
 8001efa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d032      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d022      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2205      	movs	r2, #5
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d307      	bcc.n	8001f64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f2      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x2cc>
 8001f62:	e000      	b.n	8001f66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
 8001f86:	e000      	b.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f88:	bf00      	nop
    }
  }
}
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b40      	cmp	r3, #64	; 0x40
 8001fbc:	d108      	bne.n	8001fd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fce:	e007      	b.n	8001fe0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	60da      	str	r2, [r3, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3b10      	subs	r3, #16
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <DMA_CalcBaseAndBitshift+0x64>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002006:	4a13      	ldr	r2, [pc, #76]	; (8002054 <DMA_CalcBaseAndBitshift+0x68>)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d909      	bls.n	800202e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	1d1a      	adds	r2, r3, #4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	659a      	str	r2, [r3, #88]	; 0x58
 800202c:	e007      	b.n	800203e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	aaaaaaab 	.word	0xaaaaaaab
 8002054:	08004d78 	.word	0x08004d78

08002058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11f      	bne.n	80020b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d856      	bhi.n	8002126 <DMA_CheckFifoParam+0xce>
 8002078:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <DMA_CheckFifoParam+0x28>)
 800207a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207e:	bf00      	nop
 8002080:	08002091 	.word	0x08002091
 8002084:	080020a3 	.word	0x080020a3
 8002088:	08002091 	.word	0x08002091
 800208c:	08002127 	.word	0x08002127
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d046      	beq.n	800212a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a0:	e043      	b.n	800212a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020aa:	d140      	bne.n	800212e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b0:	e03d      	b.n	800212e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ba:	d121      	bne.n	8002100 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d837      	bhi.n	8002132 <DMA_CheckFifoParam+0xda>
 80020c2:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <DMA_CheckFifoParam+0x70>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	080020df 	.word	0x080020df
 80020d0:	080020d9 	.word	0x080020d9
 80020d4:	080020f1 	.word	0x080020f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      break;
 80020dc:	e030      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d025      	beq.n	8002136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ee:	e022      	b.n	8002136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020f8:	d11f      	bne.n	800213a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020fe:	e01c      	b.n	800213a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d903      	bls.n	800210e <DMA_CheckFifoParam+0xb6>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d003      	beq.n	8002114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800210c:	e018      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
      break;
 8002112:	e015      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
      break;
 8002124:	e00b      	b.n	800213e <DMA_CheckFifoParam+0xe6>
      break;
 8002126:	bf00      	nop
 8002128:	e00a      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800212a:	bf00      	nop
 800212c:	e008      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
 8002130:	e006      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 8002132:	bf00      	nop
 8002134:	e004      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 8002136:	bf00      	nop
 8002138:	e002      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;   
 800213a:	bf00      	nop
 800213c:	e000      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
    }
  } 
  
  return status; 
 8002140:	7bfb      	ldrb	r3, [r7, #15]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e177      	b.n	800245c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 8166 	bne.w	8002456 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d005      	beq.n	80021a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d130      	bne.n	8002204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0201 	and.w	r2, r3, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b03      	cmp	r3, #3
 800220e:	d017      	beq.n	8002240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d123      	bne.n	8002294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80c0 	beq.w	8002456 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b66      	ldr	r3, [pc, #408]	; (8002474 <HAL_GPIO_Init+0x324>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a65      	ldr	r2, [pc, #404]	; (8002474 <HAL_GPIO_Init+0x324>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_GPIO_Init+0x324>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f2:	4a61      	ldr	r2, [pc, #388]	; (8002478 <HAL_GPIO_Init+0x328>)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a58      	ldr	r2, [pc, #352]	; (800247c <HAL_GPIO_Init+0x32c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d037      	beq.n	800238e <HAL_GPIO_Init+0x23e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a57      	ldr	r2, [pc, #348]	; (8002480 <HAL_GPIO_Init+0x330>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d031      	beq.n	800238a <HAL_GPIO_Init+0x23a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a56      	ldr	r2, [pc, #344]	; (8002484 <HAL_GPIO_Init+0x334>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d02b      	beq.n	8002386 <HAL_GPIO_Init+0x236>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a55      	ldr	r2, [pc, #340]	; (8002488 <HAL_GPIO_Init+0x338>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d025      	beq.n	8002382 <HAL_GPIO_Init+0x232>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a54      	ldr	r2, [pc, #336]	; (800248c <HAL_GPIO_Init+0x33c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01f      	beq.n	800237e <HAL_GPIO_Init+0x22e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a53      	ldr	r2, [pc, #332]	; (8002490 <HAL_GPIO_Init+0x340>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d019      	beq.n	800237a <HAL_GPIO_Init+0x22a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a52      	ldr	r2, [pc, #328]	; (8002494 <HAL_GPIO_Init+0x344>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <HAL_GPIO_Init+0x226>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a51      	ldr	r2, [pc, #324]	; (8002498 <HAL_GPIO_Init+0x348>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00d      	beq.n	8002372 <HAL_GPIO_Init+0x222>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a50      	ldr	r2, [pc, #320]	; (800249c <HAL_GPIO_Init+0x34c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <HAL_GPIO_Init+0x21e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4f      	ldr	r2, [pc, #316]	; (80024a0 <HAL_GPIO_Init+0x350>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_GPIO_Init+0x21a>
 8002366:	2309      	movs	r3, #9
 8002368:	e012      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800236a:	230a      	movs	r3, #10
 800236c:	e010      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800236e:	2308      	movs	r3, #8
 8002370:	e00e      	b.n	8002390 <HAL_GPIO_Init+0x240>
 8002372:	2307      	movs	r3, #7
 8002374:	e00c      	b.n	8002390 <HAL_GPIO_Init+0x240>
 8002376:	2306      	movs	r3, #6
 8002378:	e00a      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800237a:	2305      	movs	r3, #5
 800237c:	e008      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800237e:	2304      	movs	r3, #4
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x240>
 8002382:	2303      	movs	r3, #3
 8002384:	e004      	b.n	8002390 <HAL_GPIO_Init+0x240>
 8002386:	2302      	movs	r3, #2
 8002388:	e002      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800238e:	2300      	movs	r3, #0
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f002 0203 	and.w	r2, r2, #3
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	4093      	lsls	r3, r2
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a0:	4935      	ldr	r1, [pc, #212]	; (8002478 <HAL_GPIO_Init+0x328>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <HAL_GPIO_Init+0x354>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d2:	4a34      	ldr	r2, [pc, #208]	; (80024a4 <HAL_GPIO_Init+0x354>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d8:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <HAL_GPIO_Init+0x354>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023fc:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <HAL_GPIO_Init+0x354>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002402:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <HAL_GPIO_Init+0x354>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002426:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_GPIO_Init+0x354>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_GPIO_Init+0x354>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <HAL_GPIO_Init+0x354>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3301      	adds	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b0f      	cmp	r3, #15
 8002460:	f67f ae84 	bls.w	800216c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	40013800 	.word	0x40013800
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020800 	.word	0x40020800
 8002488:	40020c00 	.word	0x40020c00
 800248c:	40021000 	.word	0x40021000
 8002490:	40021400 	.word	0x40021400
 8002494:	40021800 	.word	0x40021800
 8002498:	40021c00 	.word	0x40021c00
 800249c:	40022000 	.word	0x40022000
 80024a0:	40022400 	.word	0x40022400
 80024a4:	40013c00 	.word	0x40013c00

080024a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c4:	e003      	b.n	80024ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024c6:	887b      	ldrh	r3, [r7, #2]
 80024c8:	041a      	lsls	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	619a      	str	r2, [r3, #24]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fa9a 	bl	8000a34 <HAL_GPIO_EXTI_Callback>
  }
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40013c00 	.word	0x40013c00

0800250c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_PWREx_EnableOverDrive+0x90>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <HAL_PWREx_EnableOverDrive+0x90>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_PWREx_EnableOverDrive+0x90>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002534:	2201      	movs	r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002538:	f7fe fca4 	bl	8000e84 <HAL_GetTick>
 800253c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800253e:	e009      	b.n	8002554 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002540:	f7fe fca0 	bl	8000e84 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800254e:	d901      	bls.n	8002554 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e01f      	b.n	8002594 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d1ee      	bne.n	8002540 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002568:	f7fe fc8c 	bl	8000e84 <HAL_GetTick>
 800256c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800256e:	e009      	b.n	8002584 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002570:	f7fe fc88 	bl	8000e84 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800257e:	d901      	bls.n	8002584 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e007      	b.n	8002594 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002590:	d1ee      	bne.n	8002570 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	420e0040 	.word	0x420e0040
 80025a4:	40007000 	.word	0x40007000
 80025a8:	420e0044 	.word	0x420e0044

080025ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e267      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d075      	beq.n	80026b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ca:	4b88      	ldr	r3, [pc, #544]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d00c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d6:	4b85      	ldr	r3, [pc, #532]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d112      	bne.n	8002608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e2:	4b82      	ldr	r3, [pc, #520]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ee:	d10b      	bne.n	8002608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	4b7e      	ldr	r3, [pc, #504]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d05b      	beq.n	80026b4 <HAL_RCC_OscConfig+0x108>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d157      	bne.n	80026b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e242      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d106      	bne.n	8002620 <HAL_RCC_OscConfig+0x74>
 8002612:	4b76      	ldr	r3, [pc, #472]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a75      	ldr	r2, [pc, #468]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e01d      	b.n	800265c <HAL_RCC_OscConfig+0xb0>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x98>
 800262a:	4b70      	ldr	r3, [pc, #448]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a6f      	ldr	r2, [pc, #444]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a6c      	ldr	r2, [pc, #432]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e00b      	b.n	800265c <HAL_RCC_OscConfig+0xb0>
 8002644:	4b69      	ldr	r3, [pc, #420]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a68      	ldr	r2, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800264a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b66      	ldr	r3, [pc, #408]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a65      	ldr	r2, [pc, #404]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7fe fc0e 	bl	8000e84 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266c:	f7fe fc0a 	bl	8000e84 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e207      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0xc0>
 800268a:	e014      	b.n	80026b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fbfa 	bl	8000e84 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002694:	f7fe fbf6 	bl	8000e84 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1f3      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a6:	4b51      	ldr	r3, [pc, #324]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0xe8>
 80026b2:	e000      	b.n	80026b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d063      	beq.n	800278a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c2:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d11c      	bne.n	8002714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026da:	4b44      	ldr	r3, [pc, #272]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d116      	bne.n	8002714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e6:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_RCC_OscConfig+0x152>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e1c7      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4937      	ldr	r1, [pc, #220]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002712:	e03a      	b.n	800278a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d020      	beq.n	800275e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <HAL_RCC_OscConfig+0x244>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe fbaf 	bl	8000e84 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272a:	f7fe fbab 	bl	8000e84 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e1a8      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4b28      	ldr	r3, [pc, #160]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4925      	ldr	r1, [pc, #148]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]
 800275c:	e015      	b.n	800278a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_RCC_OscConfig+0x244>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fb8e 	bl	8000e84 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276c:	f7fe fb8a 	bl	8000e84 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e187      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d036      	beq.n	8002804 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_RCC_OscConfig+0x248>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7fe fb6e 	bl	8000e84 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ac:	f7fe fb6a 	bl	8000e84 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e167      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80027c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x200>
 80027ca:	e01b      	b.n	8002804 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_RCC_OscConfig+0x248>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7fe fb57 	bl	8000e84 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d8:	e00e      	b.n	80027f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027da:	f7fe fb53 	bl	8000e84 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d907      	bls.n	80027f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e150      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
 80027ec:	40023800 	.word	0x40023800
 80027f0:	42470000 	.word	0x42470000
 80027f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80027fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ea      	bne.n	80027da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8097 	beq.w	8002940 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002816:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a7c      	ldr	r2, [pc, #496]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b7a      	ldr	r3, [pc, #488]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283e:	2301      	movs	r3, #1
 8002840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	4b77      	ldr	r3, [pc, #476]	; (8002a20 <HAL_RCC_OscConfig+0x474>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d118      	bne.n	8002880 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284e:	4b74      	ldr	r3, [pc, #464]	; (8002a20 <HAL_RCC_OscConfig+0x474>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a73      	ldr	r2, [pc, #460]	; (8002a20 <HAL_RCC_OscConfig+0x474>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285a:	f7fe fb13 	bl	8000e84 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002862:	f7fe fb0f 	bl	8000e84 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e10c      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_OscConfig+0x474>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x2ea>
 8002888:	4b64      	ldr	r3, [pc, #400]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	4a63      	ldr	r2, [pc, #396]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6713      	str	r3, [r2, #112]	; 0x70
 8002894:	e01c      	b.n	80028d0 <HAL_RCC_OscConfig+0x324>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b05      	cmp	r3, #5
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x30c>
 800289e:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	4a5e      	ldr	r2, [pc, #376]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6713      	str	r3, [r2, #112]	; 0x70
 80028aa:	4b5c      	ldr	r3, [pc, #368]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	4a5b      	ldr	r2, [pc, #364]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70
 80028b6:	e00b      	b.n	80028d0 <HAL_RCC_OscConfig+0x324>
 80028b8:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	4a57      	ldr	r2, [pc, #348]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70
 80028c4:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a54      	ldr	r2, [pc, #336]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028ca:	f023 0304 	bic.w	r3, r3, #4
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe fad4 	bl	8000e84 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e0:	f7fe fad0 	bl	8000e84 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e0cb      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0ee      	beq.n	80028e0 <HAL_RCC_OscConfig+0x334>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002904:	f7fe fabe 	bl	8000e84 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f7fe faba 	bl	8000e84 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0b5      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ee      	bne.n	800290c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	4a38      	ldr	r2, [pc, #224]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 800293a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80a1 	beq.w	8002a8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800294a:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b08      	cmp	r3, #8
 8002954:	d05c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d141      	bne.n	80029e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_RCC_OscConfig+0x478>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fe fa8e 	bl	8000e84 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe fa8a 	bl	8000e84 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e087      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	019b      	lsls	r3, r3, #6
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	3b01      	subs	r3, #1
 80029a4:	041b      	lsls	r3, r3, #16
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	491b      	ldr	r1, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x478>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe fa63 	bl	8000e84 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe fa5f 	bl	8000e84 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e05c      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x416>
 80029e0:	e054      	b.n	8002a8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_RCC_OscConfig+0x478>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fa4c 	bl	8000e84 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fa48 	bl	8000e84 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e045      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x444>
 8002a0e:	e03d      	b.n	8002a8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e038      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40007000 	.word	0x40007000
 8002a24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x4ec>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d028      	beq.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d121      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d11a      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a58:	4013      	ands	r3, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d111      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	3b01      	subs	r3, #1
 8002a72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0cc      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b68      	ldr	r3, [pc, #416]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d90c      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b65      	ldr	r3, [pc, #404]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b8      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a58      	ldr	r2, [pc, #352]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	494d      	ldr	r1, [pc, #308]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d044      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d119      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5a:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e06f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6a:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e067      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f023 0203 	bic.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4934      	ldr	r1, [pc, #208]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b8c:	f7fe f97a 	bl	8000e84 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b94:	f7fe f976 	bl	8000e84 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e04f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 020c 	and.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d1eb      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d20c      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e032      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4916      	ldr	r1, [pc, #88]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	490e      	ldr	r1, [pc, #56]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c22:	f000 f821 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	490a      	ldr	r1, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	5ccb      	ldrb	r3, [r1, r3]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe f8da 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023c00 	.word	0x40023c00
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08004d60 	.word	0x08004d60
 8002c60:	20000000 	.word	0x20000000
 8002c64:	20000004 	.word	0x20000004

08002c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c6c:	b090      	sub	sp, #64	; 0x40
 8002c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
 8002c74:	2300      	movs	r3, #0
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c78:	2300      	movs	r3, #0
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c80:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	f200 80a1 	bhi.w	8002dd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x34>
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c9a:	e09b      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b53      	ldr	r3, [pc, #332]	; (8002dec <HAL_RCC_GetSysClockFreq+0x184>)
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ca0:	e09b      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ca2:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ca4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ca6:	e098      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb2:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d028      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	627a      	str	r2, [r7, #36]	; 0x24
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd4:	fb03 f201 	mul.w	r2, r3, r1
 8002cd8:	2300      	movs	r3, #0
 8002cda:	fb00 f303 	mul.w	r3, r0, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ce2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ce8:	460a      	mov	r2, r1
 8002cea:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cee:	4413      	add	r3, r2
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	61fa      	str	r2, [r7, #28]
 8002cfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d02:	f7fd fac5 	bl	8000290 <__aeabi_uldivmod>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d0e:	e053      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d10:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	2200      	movs	r2, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	617a      	str	r2, [r7, #20]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d22:	f04f 0b00 	mov.w	fp, #0
 8002d26:	4652      	mov	r2, sl
 8002d28:	465b      	mov	r3, fp
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d38:	0150      	lsls	r0, r2, #5
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d42:	eb63 090b 	sbc.w	r9, r3, fp
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d5a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d5e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	00eb      	lsls	r3, r5, #3
 8002d6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d70:	00e2      	lsls	r2, r4, #3
 8002d72:	4614      	mov	r4, r2
 8002d74:	461d      	mov	r5, r3
 8002d76:	eb14 030a 	adds.w	r3, r4, sl
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	eb45 030b 	adc.w	r3, r5, fp
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d8e:	4629      	mov	r1, r5
 8002d90:	028b      	lsls	r3, r1, #10
 8002d92:	4621      	mov	r1, r4
 8002d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d98:	4621      	mov	r1, r4
 8002d9a:	028a      	lsls	r2, r1, #10
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da2:	2200      	movs	r2, #0
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	60fa      	str	r2, [r7, #12]
 8002da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dac:	f7fd fa70 	bl	8000290 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002dc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetSysClockFreq+0x184>)
 8002dd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3740      	adds	r7, #64	; 0x40
 8002de0:	46bd      	mov	sp, r7
 8002de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	017d7840 	.word	0x017d7840

08002df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000000 	.word	0x20000000

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e10:	f7ff fff0 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	08004d70 	.word	0x08004d70

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e38:	f7ff ffdc 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0b5b      	lsrs	r3, r3, #13
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	08004d70 	.word	0x08004d70

08002e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d075      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e90:	4b91      	ldr	r3, [pc, #580]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e96:	f7fd fff5 	bl	8000e84 <HAL_GetTick>
 8002e9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e9e:	f7fd fff1 	bl	8000e84 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e189      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eb0:	4b8a      	ldr	r3, [pc, #552]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	019a      	lsls	r2, r3, #6
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	071b      	lsls	r3, r3, #28
 8002ed4:	4981      	ldr	r1, [pc, #516]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d01f      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ee8:	4b7c      	ldr	r3, [pc, #496]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eee:	0f1b      	lsrs	r3, r3, #28
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	019a      	lsls	r2, r3, #6
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	061b      	lsls	r3, r3, #24
 8002f02:	431a      	orrs	r2, r3
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	071b      	lsls	r3, r3, #28
 8002f08:	4974      	ldr	r1, [pc, #464]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f10:	4b72      	ldr	r3, [pc, #456]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f16:	f023 021f 	bic.w	r2, r3, #31
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	496e      	ldr	r1, [pc, #440]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00d      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	019a      	lsls	r2, r3, #6
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	061b      	lsls	r3, r3, #24
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	071b      	lsls	r3, r3, #28
 8002f48:	4964      	ldr	r1, [pc, #400]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f50:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f56:	f7fd ff95 	bl	8000e84 <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f5e:	f7fd ff91 	bl	8000e84 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e129      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f70:	4b5a      	ldr	r3, [pc, #360]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d079      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f94:	4b52      	ldr	r3, [pc, #328]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f9a:	f7fd ff73 	bl	8000e84 <HAL_GetTick>
 8002f9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002fa2:	f7fd ff6f 	bl	8000e84 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e107      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fb4:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc0:	d0ef      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d020      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	0f1b      	lsrs	r3, r3, #28
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	019a      	lsls	r2, r3, #6
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	061b      	lsls	r3, r3, #24
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	071b      	lsls	r3, r3, #28
 8002fee:	493b      	ldr	r1, [pc, #236]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ff6:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	3b01      	subs	r3, #1
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	4934      	ldr	r1, [pc, #208]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01e      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800301c:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	0e1b      	lsrs	r3, r3, #24
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	019a      	lsls	r2, r3, #6
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	071b      	lsls	r3, r3, #28
 800303c:	4927      	ldr	r1, [pc, #156]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800304a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	4922      	ldr	r1, [pc, #136]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003060:	f7fd ff10 	bl	8000e84 <HAL_GetTick>
 8003064:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003068:	f7fd ff0c 	bl	8000e84 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0a4      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003086:	d1ef      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 808b 	beq.w	80031ac <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a0f      	ldr	r2, [pc, #60]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030be:	f7fd fee1 	bl	8000e84 <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030c4:	e010      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7fd fedd 	bl	8000e84 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d909      	bls.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e075      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80030d8:	42470068 	.word	0x42470068
 80030dc:	40023800 	.word	0x40023800
 80030e0:	42470070 	.word	0x42470070
 80030e4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030e8:	4b38      	ldr	r3, [pc, #224]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0e8      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030f4:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d02f      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	429a      	cmp	r2, r3
 8003110:	d028      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003112:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800311c:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003122:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003128:	4a29      	ldr	r2, [pc, #164]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800312e:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d114      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800313a:	f7fd fea3 	bl	8000e84 <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fd fe9f 	bl	8000e84 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e035      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ee      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003170:	d10d      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003186:	4912      	ldr	r1, [pc, #72]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]
 800318c:	e005      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003194:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003198:	6093      	str	r3, [r2, #8]
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800319c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a6:	490a      	ldr	r1, [pc, #40]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80031c0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40007000 	.word	0x40007000
 80031d0:	40023800 	.word	0x40023800
 80031d4:	42470e40 	.word	0x42470e40
 80031d8:	424711e0 	.word	0x424711e0

080031dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e066      	b.n	80032c0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7f5b      	ldrb	r3, [r3, #29]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd fc4c 	bl	8000aa0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	22ca      	movs	r2, #202	; 0xca
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2253      	movs	r2, #83	; 0x53
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f87a 	bl	8003318 <RTC_EnterInitMode>
 8003224:	4603      	mov	r3, r0
 8003226:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d12c      	bne.n	8003288 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800323c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003240:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6899      	ldr	r1, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68d2      	ldr	r2, [r2, #12]
 8003268:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6919      	ldr	r1, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	041a      	lsls	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f881 	bl	8003386 <RTC_ExitInitMode>
 8003284:	4603      	mov	r3, r0
 8003286:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d113      	bne.n	80032b6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699a      	ldr	r2, [r3, #24]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	22ff      	movs	r2, #255	; 0xff
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032e2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e4:	f7fd fdce 	bl	8000e84 <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032ea:	e009      	b.n	8003300 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032ec:	f7fd fdca 	bl	8000e84 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032fa:	d901      	bls.n	8003300 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e007      	b.n	8003310 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0ee      	beq.n	80032ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d122      	bne.n	800337c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003344:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003346:	f7fd fd9d 	bl	8000e84 <HAL_GetTick>
 800334a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800334c:	e00c      	b.n	8003368 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800334e:	f7fd fd99 	bl	8000e84 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335c:	d904      	bls.n	8003368 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2204      	movs	r2, #4
 8003362:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <RTC_EnterInitMode+0x64>
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d1e8      	bne.n	800334e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff89 	bl	80032c8 <HAL_RTC_WaitForSynchro>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2204      	movs	r2, #4
 80033c0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e03f      	b.n	8003462 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fc64 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	; 0x24
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fd7b 	bl	8003f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b08a      	sub	sp, #40	; 0x28
 800346e:	af02      	add	r7, sp, #8
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b20      	cmp	r3, #32
 8003488:	d17c      	bne.n	8003584 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_UART_Transmit+0x2c>
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e075      	b.n	8003586 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_UART_Transmit+0x3e>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e06e      	b.n	8003586 <HAL_UART_Transmit+0x11c>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2221      	movs	r2, #33	; 0x21
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034be:	f7fd fce1 	bl	8000e84 <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	88fa      	ldrh	r2, [r7, #6]
 80034c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d108      	bne.n	80034ec <HAL_UART_Transmit+0x82>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e003      	b.n	80034f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034fc:	e02a      	b.n	8003554 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2200      	movs	r2, #0
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 faf9 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e036      	b.n	8003586 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800352c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	3302      	adds	r3, #2
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	e007      	b.n	8003546 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1cf      	bne.n	80034fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2140      	movs	r1, #64	; 0x40
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fac9 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e006      	b.n	8003586 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b0ba      	sub	sp, #232	; 0xe8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035bc:	2300      	movs	r3, #0
 80035be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <HAL_UART_IRQHandler+0x66>
 80035e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fbd3 	bl	8003d9a <UART_Receive_IT>
      return;
 80035f4:	e256      	b.n	8003aa4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 80de 	beq.w	80037bc <HAL_UART_IRQHandler+0x22c>
 8003600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d106      	bne.n	800361a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800360c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003610:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80d1 	beq.w	80037bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <HAL_UART_IRQHandler+0xae>
 8003626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f043 0201 	orr.w	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_UART_IRQHandler+0xd2>
 800364a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f043 0202 	orr.w	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_UART_IRQHandler+0xf6>
 800366e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f043 0204 	orr.w	r2, r3, #4
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d011      	beq.n	80036b6 <HAL_UART_IRQHandler+0x126>
 8003692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800369e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f043 0208 	orr.w	r2, r3, #8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 81ed 	beq.w	8003a9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_UART_IRQHandler+0x14e>
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fb5e 	bl	8003d9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b40      	cmp	r3, #64	; 0x40
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <HAL_UART_IRQHandler+0x17a>
 8003702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d04f      	beq.n	80037aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fa66 	bl	8003bdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d141      	bne.n	80037a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3314      	adds	r3, #20
 8003724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800373c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3314      	adds	r3, #20
 8003746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800374a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800374e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1d9      	bne.n	800371e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	2b00      	cmp	r3, #0
 8003770:	d013      	beq.n	800379a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	4a7d      	ldr	r2, [pc, #500]	; (800396c <HAL_UART_IRQHandler+0x3dc>)
 8003778:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fa5a 	bl	8001c38 <HAL_DMA_Abort_IT>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003794:	4610      	mov	r0, r2
 8003796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	e00e      	b.n	80037b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f99a 	bl	8003ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	e00a      	b.n	80037b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f996 	bl	8003ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a8:	e006      	b.n	80037b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f992 	bl	8003ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037b6:	e170      	b.n	8003a9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b8:	bf00      	nop
    return;
 80037ba:	e16e      	b.n	8003a9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	f040 814a 	bne.w	8003a5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8143 	beq.w	8003a5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 813c 	beq.w	8003a5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037e2:	2300      	movs	r3, #0
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	f040 80b4 	bne.w	8003970 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003814:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8140 	beq.w	8003a9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003826:	429a      	cmp	r2, r3
 8003828:	f080 8139 	bcs.w	8003a9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003832:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383e:	f000 8088 	beq.w	8003952 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800385c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800386e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800387a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1d9      	bne.n	8003842 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3314      	adds	r3, #20
 8003894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800389e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e1      	bne.n	800388e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3314      	adds	r3, #20
 80038d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3314      	adds	r3, #20
 80038ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e3      	bne.n	80038ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	330c      	adds	r3, #12
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391a:	e853 3f00 	ldrex	r3, [r3]
 800391e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003922:	f023 0310 	bic.w	r3, r3, #16
 8003926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	330c      	adds	r3, #12
 8003930:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003934:	65ba      	str	r2, [r7, #88]	; 0x58
 8003936:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800393a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e3      	bne.n	8003910 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe f903 	bl	8001b58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800395a:	b29b      	uxth	r3, r3
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	b29b      	uxth	r3, r3
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f8c0 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003968:	e099      	b.n	8003a9e <HAL_UART_IRQHandler+0x50e>
 800396a:	bf00      	nop
 800396c:	08003ca3 	.word	0x08003ca3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003978:	b29b      	uxth	r3, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 808b 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800398c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 8086 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039ba:	647a      	str	r2, [r7, #68]	; 0x44
 80039bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e3      	bne.n	8003996 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3314      	adds	r3, #20
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	623b      	str	r3, [r7, #32]
   return(result);
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3314      	adds	r3, #20
 80039ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039f2:	633a      	str	r2, [r7, #48]	; 0x30
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e3      	bne.n	80039ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	330c      	adds	r3, #12
 8003a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0310 	bic.w	r3, r3, #16
 8003a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a38:	61fa      	str	r2, [r7, #28]
 8003a3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	69b9      	ldr	r1, [r7, #24]
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	617b      	str	r3, [r7, #20]
   return(result);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e3      	bne.n	8003a14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f848 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a58:	e023      	b.n	8003aa2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_UART_IRQHandler+0x4ea>
 8003a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f929 	bl	8003cca <UART_Transmit_IT>
    return;
 8003a78:	e014      	b.n	8003aa4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00e      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x514>
 8003a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f969 	bl	8003d6a <UART_EndTransmit_IT>
    return;
 8003a98:	e004      	b.n	8003aa4 <HAL_UART_IRQHandler+0x514>
    return;
 8003a9a:	bf00      	nop
 8003a9c:	e002      	b.n	8003aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8003a9e:	bf00      	nop
 8003aa0:	e000      	b.n	8003aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8003aa2:	bf00      	nop
  }
}
 8003aa4:	37e8      	adds	r7, #232	; 0xe8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop

08003aac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b090      	sub	sp, #64	; 0x40
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b10:	e050      	b.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d04c      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b20:	f7fd f9b0 	bl	8000e84 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d241      	bcs.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b50:	637a      	str	r2, [r7, #52]	; 0x34
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e5      	bne.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	613b      	str	r3, [r7, #16]
   return(result);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3314      	adds	r3, #20
 8003b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b84:	623a      	str	r2, [r7, #32]
 8003b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	69f9      	ldr	r1, [r7, #28]
 8003b8a:	6a3a      	ldr	r2, [r7, #32]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e5      	bne.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e00f      	b.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d09f      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3740      	adds	r7, #64	; 0x40
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b095      	sub	sp, #84	; 0x54
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c04:	643a      	str	r2, [r7, #64]	; 0x40
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e5      	bne.n	8003be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e5      	bne.n	8003c18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d119      	bne.n	8003c88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f023 0310 	bic.w	r3, r3, #16
 8003c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c74:	61ba      	str	r2, [r7, #24]
 8003c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6979      	ldr	r1, [r7, #20]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	613b      	str	r3, [r7, #16]
   return(result);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e5      	bne.n	8003c54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c96:	bf00      	nop
 8003c98:	3754      	adds	r7, #84	; 0x54
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff ff09 	bl	8003ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b21      	cmp	r3, #33	; 0x21
 8003cdc:	d13e      	bne.n	8003d5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce6:	d114      	bne.n	8003d12 <UART_Transmit_IT+0x48>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d110      	bne.n	8003d12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	1c9a      	adds	r2, r3, #2
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	621a      	str	r2, [r3, #32]
 8003d10:	e008      	b.n	8003d24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6211      	str	r1, [r2, #32]
 8003d1c:	781a      	ldrb	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	4619      	mov	r1, r3
 8003d32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10f      	bne.n	8003d58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff fe8e 	bl	8003aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b08c      	sub	sp, #48	; 0x30
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b22      	cmp	r3, #34	; 0x22
 8003dac:	f040 80ab 	bne.w	8003f06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db8:	d117      	bne.n	8003dea <UART_Receive_IT+0x50>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d113      	bne.n	8003dea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28
 8003de8:	e026      	b.n	8003e38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfc:	d007      	beq.n	8003e0e <UART_Receive_IT+0x74>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <UART_Receive_IT+0x82>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e008      	b.n	8003e2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4619      	mov	r1, r3
 8003e46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d15a      	bne.n	8003f02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0220 	bic.w	r2, r2, #32
 8003e5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d135      	bne.n	8003ef8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f023 0310 	bic.w	r3, r3, #16
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb2:	623a      	str	r2, [r7, #32]
 8003eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	69f9      	ldr	r1, [r7, #28]
 8003eb8:	6a3a      	ldr	r2, [r7, #32]
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e5      	bne.n	8003e92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d10a      	bne.n	8003eea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff fdf9 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
 8003ef6:	e002      	b.n	8003efe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fde1 	bl	8003ac0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e002      	b.n	8003f08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3730      	adds	r7, #48	; 0x30
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f14:	b0c0      	sub	sp, #256	; 0x100
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2c:	68d9      	ldr	r1, [r3, #12]
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	ea40 0301 	orr.w	r3, r0, r1
 8003f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f68:	f021 010c 	bic.w	r1, r1, #12
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f76:	430b      	orrs	r3, r1
 8003f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8a:	6999      	ldr	r1, [r3, #24]
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	ea40 0301 	orr.w	r3, r0, r1
 8003f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b8f      	ldr	r3, [pc, #572]	; (80041dc <UART_SetConfig+0x2cc>)
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d005      	beq.n	8003fb0 <UART_SetConfig+0xa0>
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b8d      	ldr	r3, [pc, #564]	; (80041e0 <UART_SetConfig+0x2d0>)
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d104      	bne.n	8003fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fb0:	f7fe ff40 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8003fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fb8:	e003      	b.n	8003fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fba:	f7fe ff27 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8003fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fcc:	f040 810c 	bne.w	80041e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	1891      	adds	r1, r2, r2
 8003fe8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fea:	415b      	adcs	r3, r3
 8003fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	eb12 0801 	adds.w	r8, r2, r1
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	eb43 0901 	adc.w	r9, r3, r1
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800400a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800400e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004012:	4690      	mov	r8, r2
 8004014:	4699      	mov	r9, r3
 8004016:	4623      	mov	r3, r4
 8004018:	eb18 0303 	adds.w	r3, r8, r3
 800401c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004020:	462b      	mov	r3, r5
 8004022:	eb49 0303 	adc.w	r3, r9, r3
 8004026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004036:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800403a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800403e:	460b      	mov	r3, r1
 8004040:	18db      	adds	r3, r3, r3
 8004042:	653b      	str	r3, [r7, #80]	; 0x50
 8004044:	4613      	mov	r3, r2
 8004046:	eb42 0303 	adc.w	r3, r2, r3
 800404a:	657b      	str	r3, [r7, #84]	; 0x54
 800404c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004054:	f7fc f91c 	bl	8000290 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4b61      	ldr	r3, [pc, #388]	; (80041e4 <UART_SetConfig+0x2d4>)
 800405e:	fba3 2302 	umull	r2, r3, r3, r2
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	011c      	lsls	r4, r3, #4
 8004066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406a:	2200      	movs	r2, #0
 800406c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004070:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004078:	4642      	mov	r2, r8
 800407a:	464b      	mov	r3, r9
 800407c:	1891      	adds	r1, r2, r2
 800407e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004080:	415b      	adcs	r3, r3
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004088:	4641      	mov	r1, r8
 800408a:	eb12 0a01 	adds.w	sl, r2, r1
 800408e:	4649      	mov	r1, r9
 8004090:	eb43 0b01 	adc.w	fp, r3, r1
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040a8:	4692      	mov	sl, r2
 80040aa:	469b      	mov	fp, r3
 80040ac:	4643      	mov	r3, r8
 80040ae:	eb1a 0303 	adds.w	r3, sl, r3
 80040b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040b6:	464b      	mov	r3, r9
 80040b8:	eb4b 0303 	adc.w	r3, fp, r3
 80040bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040d4:	460b      	mov	r3, r1
 80040d6:	18db      	adds	r3, r3, r3
 80040d8:	643b      	str	r3, [r7, #64]	; 0x40
 80040da:	4613      	mov	r3, r2
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	647b      	str	r3, [r7, #68]	; 0x44
 80040e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040ea:	f7fc f8d1 	bl	8000290 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <UART_SetConfig+0x2d4>)
 80040f6:	fba3 2301 	umull	r2, r3, r3, r1
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2264      	movs	r2, #100	; 0x64
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	1acb      	subs	r3, r1, r3
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800410a:	4b36      	ldr	r3, [pc, #216]	; (80041e4 <UART_SetConfig+0x2d4>)
 800410c:	fba3 2302 	umull	r2, r3, r3, r2
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004118:	441c      	add	r4, r3
 800411a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800411e:	2200      	movs	r2, #0
 8004120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004124:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	1891      	adds	r1, r2, r2
 8004132:	63b9      	str	r1, [r7, #56]	; 0x38
 8004134:	415b      	adcs	r3, r3
 8004136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800413c:	4641      	mov	r1, r8
 800413e:	1851      	adds	r1, r2, r1
 8004140:	6339      	str	r1, [r7, #48]	; 0x30
 8004142:	4649      	mov	r1, r9
 8004144:	414b      	adcs	r3, r1
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004154:	4659      	mov	r1, fp
 8004156:	00cb      	lsls	r3, r1, #3
 8004158:	4651      	mov	r1, sl
 800415a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415e:	4651      	mov	r1, sl
 8004160:	00ca      	lsls	r2, r1, #3
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	4603      	mov	r3, r0
 8004168:	4642      	mov	r2, r8
 800416a:	189b      	adds	r3, r3, r2
 800416c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004170:	464b      	mov	r3, r9
 8004172:	460a      	mov	r2, r1
 8004174:	eb42 0303 	adc.w	r3, r2, r3
 8004178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004188:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800418c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004190:	460b      	mov	r3, r1
 8004192:	18db      	adds	r3, r3, r3
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
 8004196:	4613      	mov	r3, r2
 8004198:	eb42 0303 	adc.w	r3, r2, r3
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041a6:	f7fc f873 	bl	8000290 <__aeabi_uldivmod>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <UART_SetConfig+0x2d4>)
 80041b0:	fba3 1302 	umull	r1, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	2164      	movs	r1, #100	; 0x64
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	3332      	adds	r3, #50	; 0x32
 80041c2:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <UART_SetConfig+0x2d4>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	f003 0207 	and.w	r2, r3, #7
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4422      	add	r2, r4
 80041d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041d8:	e105      	b.n	80043e6 <UART_SetConfig+0x4d6>
 80041da:	bf00      	nop
 80041dc:	40011000 	.word	0x40011000
 80041e0:	40011400 	.word	0x40011400
 80041e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041fa:	4642      	mov	r2, r8
 80041fc:	464b      	mov	r3, r9
 80041fe:	1891      	adds	r1, r2, r2
 8004200:	6239      	str	r1, [r7, #32]
 8004202:	415b      	adcs	r3, r3
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
 8004206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800420a:	4641      	mov	r1, r8
 800420c:	1854      	adds	r4, r2, r1
 800420e:	4649      	mov	r1, r9
 8004210:	eb43 0501 	adc.w	r5, r3, r1
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	00eb      	lsls	r3, r5, #3
 800421e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004222:	00e2      	lsls	r2, r4, #3
 8004224:	4614      	mov	r4, r2
 8004226:	461d      	mov	r5, r3
 8004228:	4643      	mov	r3, r8
 800422a:	18e3      	adds	r3, r4, r3
 800422c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004230:	464b      	mov	r3, r9
 8004232:	eb45 0303 	adc.w	r3, r5, r3
 8004236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004246:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004256:	4629      	mov	r1, r5
 8004258:	008b      	lsls	r3, r1, #2
 800425a:	4621      	mov	r1, r4
 800425c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004260:	4621      	mov	r1, r4
 8004262:	008a      	lsls	r2, r1, #2
 8004264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004268:	f7fc f812 	bl	8000290 <__aeabi_uldivmod>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4b60      	ldr	r3, [pc, #384]	; (80043f4 <UART_SetConfig+0x4e4>)
 8004272:	fba3 2302 	umull	r2, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	011c      	lsls	r4, r3, #4
 800427a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004284:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800428c:	4642      	mov	r2, r8
 800428e:	464b      	mov	r3, r9
 8004290:	1891      	adds	r1, r2, r2
 8004292:	61b9      	str	r1, [r7, #24]
 8004294:	415b      	adcs	r3, r3
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800429c:	4641      	mov	r1, r8
 800429e:	1851      	adds	r1, r2, r1
 80042a0:	6139      	str	r1, [r7, #16]
 80042a2:	4649      	mov	r1, r9
 80042a4:	414b      	adcs	r3, r1
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042b4:	4659      	mov	r1, fp
 80042b6:	00cb      	lsls	r3, r1, #3
 80042b8:	4651      	mov	r1, sl
 80042ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042be:	4651      	mov	r1, sl
 80042c0:	00ca      	lsls	r2, r1, #3
 80042c2:	4610      	mov	r0, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	4603      	mov	r3, r0
 80042c8:	4642      	mov	r2, r8
 80042ca:	189b      	adds	r3, r3, r2
 80042cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042d0:	464b      	mov	r3, r9
 80042d2:	460a      	mov	r2, r1
 80042d4:	eb42 0303 	adc.w	r3, r2, r3
 80042d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80042e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042f4:	4649      	mov	r1, r9
 80042f6:	008b      	lsls	r3, r1, #2
 80042f8:	4641      	mov	r1, r8
 80042fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042fe:	4641      	mov	r1, r8
 8004300:	008a      	lsls	r2, r1, #2
 8004302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004306:	f7fb ffc3 	bl	8000290 <__aeabi_uldivmod>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <UART_SetConfig+0x4e4>)
 8004310:	fba3 1302 	umull	r1, r3, r3, r2
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	2164      	movs	r1, #100	; 0x64
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	3332      	adds	r3, #50	; 0x32
 8004322:	4a34      	ldr	r2, [pc, #208]	; (80043f4 <UART_SetConfig+0x4e4>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800432e:	441c      	add	r4, r3
 8004330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004334:	2200      	movs	r2, #0
 8004336:	673b      	str	r3, [r7, #112]	; 0x70
 8004338:	677a      	str	r2, [r7, #116]	; 0x74
 800433a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800433e:	4642      	mov	r2, r8
 8004340:	464b      	mov	r3, r9
 8004342:	1891      	adds	r1, r2, r2
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	415b      	adcs	r3, r3
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800434e:	4641      	mov	r1, r8
 8004350:	1851      	adds	r1, r2, r1
 8004352:	6039      	str	r1, [r7, #0]
 8004354:	4649      	mov	r1, r9
 8004356:	414b      	adcs	r3, r1
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004366:	4659      	mov	r1, fp
 8004368:	00cb      	lsls	r3, r1, #3
 800436a:	4651      	mov	r1, sl
 800436c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004370:	4651      	mov	r1, sl
 8004372:	00ca      	lsls	r2, r1, #3
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	4603      	mov	r3, r0
 800437a:	4642      	mov	r2, r8
 800437c:	189b      	adds	r3, r3, r2
 800437e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004380:	464b      	mov	r3, r9
 8004382:	460a      	mov	r2, r1
 8004384:	eb42 0303 	adc.w	r3, r2, r3
 8004388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800438a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	663b      	str	r3, [r7, #96]	; 0x60
 8004394:	667a      	str	r2, [r7, #100]	; 0x64
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043a2:	4649      	mov	r1, r9
 80043a4:	008b      	lsls	r3, r1, #2
 80043a6:	4641      	mov	r1, r8
 80043a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ac:	4641      	mov	r1, r8
 80043ae:	008a      	lsls	r2, r1, #2
 80043b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043b4:	f7fb ff6c 	bl	8000290 <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <UART_SetConfig+0x4e4>)
 80043be:	fba3 1302 	umull	r1, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2164      	movs	r1, #100	; 0x64
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <UART_SetConfig+0x4e4>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4422      	add	r2, r4
 80043e4:	609a      	str	r2, [r3, #8]
}
 80043e6:	bf00      	nop
 80043e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043ec:	46bd      	mov	sp, r7
 80043ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f2:	bf00      	nop
 80043f4:	51eb851f 	.word	0x51eb851f

080043f8 <__errno>:
 80043f8:	4b01      	ldr	r3, [pc, #4]	; (8004400 <__errno+0x8>)
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	2000000c 	.word	0x2000000c

08004404 <__libc_init_array>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	4d0d      	ldr	r5, [pc, #52]	; (800443c <__libc_init_array+0x38>)
 8004408:	4c0d      	ldr	r4, [pc, #52]	; (8004440 <__libc_init_array+0x3c>)
 800440a:	1b64      	subs	r4, r4, r5
 800440c:	10a4      	asrs	r4, r4, #2
 800440e:	2600      	movs	r6, #0
 8004410:	42a6      	cmp	r6, r4
 8004412:	d109      	bne.n	8004428 <__libc_init_array+0x24>
 8004414:	4d0b      	ldr	r5, [pc, #44]	; (8004444 <__libc_init_array+0x40>)
 8004416:	4c0c      	ldr	r4, [pc, #48]	; (8004448 <__libc_init_array+0x44>)
 8004418:	f000 fc8e 	bl	8004d38 <_init>
 800441c:	1b64      	subs	r4, r4, r5
 800441e:	10a4      	asrs	r4, r4, #2
 8004420:	2600      	movs	r6, #0
 8004422:	42a6      	cmp	r6, r4
 8004424:	d105      	bne.n	8004432 <__libc_init_array+0x2e>
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	f855 3b04 	ldr.w	r3, [r5], #4
 800442c:	4798      	blx	r3
 800442e:	3601      	adds	r6, #1
 8004430:	e7ee      	b.n	8004410 <__libc_init_array+0xc>
 8004432:	f855 3b04 	ldr.w	r3, [r5], #4
 8004436:	4798      	blx	r3
 8004438:	3601      	adds	r6, #1
 800443a:	e7f2      	b.n	8004422 <__libc_init_array+0x1e>
 800443c:	08004dbc 	.word	0x08004dbc
 8004440:	08004dbc 	.word	0x08004dbc
 8004444:	08004dbc 	.word	0x08004dbc
 8004448:	08004dc0 	.word	0x08004dc0

0800444c <memset>:
 800444c:	4402      	add	r2, r0
 800444e:	4603      	mov	r3, r0
 8004450:	4293      	cmp	r3, r2
 8004452:	d100      	bne.n	8004456 <memset+0xa>
 8004454:	4770      	bx	lr
 8004456:	f803 1b01 	strb.w	r1, [r3], #1
 800445a:	e7f9      	b.n	8004450 <memset+0x4>

0800445c <siprintf>:
 800445c:	b40e      	push	{r1, r2, r3}
 800445e:	b500      	push	{lr}
 8004460:	b09c      	sub	sp, #112	; 0x70
 8004462:	ab1d      	add	r3, sp, #116	; 0x74
 8004464:	9002      	str	r0, [sp, #8]
 8004466:	9006      	str	r0, [sp, #24]
 8004468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800446c:	4809      	ldr	r0, [pc, #36]	; (8004494 <siprintf+0x38>)
 800446e:	9107      	str	r1, [sp, #28]
 8004470:	9104      	str	r1, [sp, #16]
 8004472:	4909      	ldr	r1, [pc, #36]	; (8004498 <siprintf+0x3c>)
 8004474:	f853 2b04 	ldr.w	r2, [r3], #4
 8004478:	9105      	str	r1, [sp, #20]
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	a902      	add	r1, sp, #8
 8004480:	f000 f868 	bl	8004554 <_svfiprintf_r>
 8004484:	9b02      	ldr	r3, [sp, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	b01c      	add	sp, #112	; 0x70
 800448c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004490:	b003      	add	sp, #12
 8004492:	4770      	bx	lr
 8004494:	2000000c 	.word	0x2000000c
 8004498:	ffff0208 	.word	0xffff0208

0800449c <__ssputs_r>:
 800449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	688e      	ldr	r6, [r1, #8]
 80044a2:	429e      	cmp	r6, r3
 80044a4:	4682      	mov	sl, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	4690      	mov	r8, r2
 80044aa:	461f      	mov	r7, r3
 80044ac:	d838      	bhi.n	8004520 <__ssputs_r+0x84>
 80044ae:	898a      	ldrh	r2, [r1, #12]
 80044b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044b4:	d032      	beq.n	800451c <__ssputs_r+0x80>
 80044b6:	6825      	ldr	r5, [r4, #0]
 80044b8:	6909      	ldr	r1, [r1, #16]
 80044ba:	eba5 0901 	sub.w	r9, r5, r1
 80044be:	6965      	ldr	r5, [r4, #20]
 80044c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044c8:	3301      	adds	r3, #1
 80044ca:	444b      	add	r3, r9
 80044cc:	106d      	asrs	r5, r5, #1
 80044ce:	429d      	cmp	r5, r3
 80044d0:	bf38      	it	cc
 80044d2:	461d      	movcc	r5, r3
 80044d4:	0553      	lsls	r3, r2, #21
 80044d6:	d531      	bpl.n	800453c <__ssputs_r+0xa0>
 80044d8:	4629      	mov	r1, r5
 80044da:	f000 fb63 	bl	8004ba4 <_malloc_r>
 80044de:	4606      	mov	r6, r0
 80044e0:	b950      	cbnz	r0, 80044f8 <__ssputs_r+0x5c>
 80044e2:	230c      	movs	r3, #12
 80044e4:	f8ca 3000 	str.w	r3, [sl]
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
 80044f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f8:	6921      	ldr	r1, [r4, #16]
 80044fa:	464a      	mov	r2, r9
 80044fc:	f000 fabe 	bl	8004a7c <memcpy>
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450a:	81a3      	strh	r3, [r4, #12]
 800450c:	6126      	str	r6, [r4, #16]
 800450e:	6165      	str	r5, [r4, #20]
 8004510:	444e      	add	r6, r9
 8004512:	eba5 0509 	sub.w	r5, r5, r9
 8004516:	6026      	str	r6, [r4, #0]
 8004518:	60a5      	str	r5, [r4, #8]
 800451a:	463e      	mov	r6, r7
 800451c:	42be      	cmp	r6, r7
 800451e:	d900      	bls.n	8004522 <__ssputs_r+0x86>
 8004520:	463e      	mov	r6, r7
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	4632      	mov	r2, r6
 8004526:	4641      	mov	r1, r8
 8004528:	f000 fab6 	bl	8004a98 <memmove>
 800452c:	68a3      	ldr	r3, [r4, #8]
 800452e:	1b9b      	subs	r3, r3, r6
 8004530:	60a3      	str	r3, [r4, #8]
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	4433      	add	r3, r6
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	2000      	movs	r0, #0
 800453a:	e7db      	b.n	80044f4 <__ssputs_r+0x58>
 800453c:	462a      	mov	r2, r5
 800453e:	f000 fba5 	bl	8004c8c <_realloc_r>
 8004542:	4606      	mov	r6, r0
 8004544:	2800      	cmp	r0, #0
 8004546:	d1e1      	bne.n	800450c <__ssputs_r+0x70>
 8004548:	6921      	ldr	r1, [r4, #16]
 800454a:	4650      	mov	r0, sl
 800454c:	f000 fabe 	bl	8004acc <_free_r>
 8004550:	e7c7      	b.n	80044e2 <__ssputs_r+0x46>
	...

08004554 <_svfiprintf_r>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	4698      	mov	r8, r3
 800455a:	898b      	ldrh	r3, [r1, #12]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	b09d      	sub	sp, #116	; 0x74
 8004560:	4607      	mov	r7, r0
 8004562:	460d      	mov	r5, r1
 8004564:	4614      	mov	r4, r2
 8004566:	d50e      	bpl.n	8004586 <_svfiprintf_r+0x32>
 8004568:	690b      	ldr	r3, [r1, #16]
 800456a:	b963      	cbnz	r3, 8004586 <_svfiprintf_r+0x32>
 800456c:	2140      	movs	r1, #64	; 0x40
 800456e:	f000 fb19 	bl	8004ba4 <_malloc_r>
 8004572:	6028      	str	r0, [r5, #0]
 8004574:	6128      	str	r0, [r5, #16]
 8004576:	b920      	cbnz	r0, 8004582 <_svfiprintf_r+0x2e>
 8004578:	230c      	movs	r3, #12
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
 8004580:	e0d1      	b.n	8004726 <_svfiprintf_r+0x1d2>
 8004582:	2340      	movs	r3, #64	; 0x40
 8004584:	616b      	str	r3, [r5, #20]
 8004586:	2300      	movs	r3, #0
 8004588:	9309      	str	r3, [sp, #36]	; 0x24
 800458a:	2320      	movs	r3, #32
 800458c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004590:	f8cd 800c 	str.w	r8, [sp, #12]
 8004594:	2330      	movs	r3, #48	; 0x30
 8004596:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004740 <_svfiprintf_r+0x1ec>
 800459a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800459e:	f04f 0901 	mov.w	r9, #1
 80045a2:	4623      	mov	r3, r4
 80045a4:	469a      	mov	sl, r3
 80045a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045aa:	b10a      	cbz	r2, 80045b0 <_svfiprintf_r+0x5c>
 80045ac:	2a25      	cmp	r2, #37	; 0x25
 80045ae:	d1f9      	bne.n	80045a4 <_svfiprintf_r+0x50>
 80045b0:	ebba 0b04 	subs.w	fp, sl, r4
 80045b4:	d00b      	beq.n	80045ce <_svfiprintf_r+0x7a>
 80045b6:	465b      	mov	r3, fp
 80045b8:	4622      	mov	r2, r4
 80045ba:	4629      	mov	r1, r5
 80045bc:	4638      	mov	r0, r7
 80045be:	f7ff ff6d 	bl	800449c <__ssputs_r>
 80045c2:	3001      	adds	r0, #1
 80045c4:	f000 80aa 	beq.w	800471c <_svfiprintf_r+0x1c8>
 80045c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045ca:	445a      	add	r2, fp
 80045cc:	9209      	str	r2, [sp, #36]	; 0x24
 80045ce:	f89a 3000 	ldrb.w	r3, [sl]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80a2 	beq.w	800471c <_svfiprintf_r+0x1c8>
 80045d8:	2300      	movs	r3, #0
 80045da:	f04f 32ff 	mov.w	r2, #4294967295
 80045de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045e2:	f10a 0a01 	add.w	sl, sl, #1
 80045e6:	9304      	str	r3, [sp, #16]
 80045e8:	9307      	str	r3, [sp, #28]
 80045ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045ee:	931a      	str	r3, [sp, #104]	; 0x68
 80045f0:	4654      	mov	r4, sl
 80045f2:	2205      	movs	r2, #5
 80045f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f8:	4851      	ldr	r0, [pc, #324]	; (8004740 <_svfiprintf_r+0x1ec>)
 80045fa:	f7fb fdf9 	bl	80001f0 <memchr>
 80045fe:	9a04      	ldr	r2, [sp, #16]
 8004600:	b9d8      	cbnz	r0, 800463a <_svfiprintf_r+0xe6>
 8004602:	06d0      	lsls	r0, r2, #27
 8004604:	bf44      	itt	mi
 8004606:	2320      	movmi	r3, #32
 8004608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800460c:	0711      	lsls	r1, r2, #28
 800460e:	bf44      	itt	mi
 8004610:	232b      	movmi	r3, #43	; 0x2b
 8004612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004616:	f89a 3000 	ldrb.w	r3, [sl]
 800461a:	2b2a      	cmp	r3, #42	; 0x2a
 800461c:	d015      	beq.n	800464a <_svfiprintf_r+0xf6>
 800461e:	9a07      	ldr	r2, [sp, #28]
 8004620:	4654      	mov	r4, sl
 8004622:	2000      	movs	r0, #0
 8004624:	f04f 0c0a 	mov.w	ip, #10
 8004628:	4621      	mov	r1, r4
 800462a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800462e:	3b30      	subs	r3, #48	; 0x30
 8004630:	2b09      	cmp	r3, #9
 8004632:	d94e      	bls.n	80046d2 <_svfiprintf_r+0x17e>
 8004634:	b1b0      	cbz	r0, 8004664 <_svfiprintf_r+0x110>
 8004636:	9207      	str	r2, [sp, #28]
 8004638:	e014      	b.n	8004664 <_svfiprintf_r+0x110>
 800463a:	eba0 0308 	sub.w	r3, r0, r8
 800463e:	fa09 f303 	lsl.w	r3, r9, r3
 8004642:	4313      	orrs	r3, r2
 8004644:	9304      	str	r3, [sp, #16]
 8004646:	46a2      	mov	sl, r4
 8004648:	e7d2      	b.n	80045f0 <_svfiprintf_r+0x9c>
 800464a:	9b03      	ldr	r3, [sp, #12]
 800464c:	1d19      	adds	r1, r3, #4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	9103      	str	r1, [sp, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	bfbb      	ittet	lt
 8004656:	425b      	neglt	r3, r3
 8004658:	f042 0202 	orrlt.w	r2, r2, #2
 800465c:	9307      	strge	r3, [sp, #28]
 800465e:	9307      	strlt	r3, [sp, #28]
 8004660:	bfb8      	it	lt
 8004662:	9204      	strlt	r2, [sp, #16]
 8004664:	7823      	ldrb	r3, [r4, #0]
 8004666:	2b2e      	cmp	r3, #46	; 0x2e
 8004668:	d10c      	bne.n	8004684 <_svfiprintf_r+0x130>
 800466a:	7863      	ldrb	r3, [r4, #1]
 800466c:	2b2a      	cmp	r3, #42	; 0x2a
 800466e:	d135      	bne.n	80046dc <_svfiprintf_r+0x188>
 8004670:	9b03      	ldr	r3, [sp, #12]
 8004672:	1d1a      	adds	r2, r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	9203      	str	r2, [sp, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	bfb8      	it	lt
 800467c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004680:	3402      	adds	r4, #2
 8004682:	9305      	str	r3, [sp, #20]
 8004684:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004750 <_svfiprintf_r+0x1fc>
 8004688:	7821      	ldrb	r1, [r4, #0]
 800468a:	2203      	movs	r2, #3
 800468c:	4650      	mov	r0, sl
 800468e:	f7fb fdaf 	bl	80001f0 <memchr>
 8004692:	b140      	cbz	r0, 80046a6 <_svfiprintf_r+0x152>
 8004694:	2340      	movs	r3, #64	; 0x40
 8004696:	eba0 000a 	sub.w	r0, r0, sl
 800469a:	fa03 f000 	lsl.w	r0, r3, r0
 800469e:	9b04      	ldr	r3, [sp, #16]
 80046a0:	4303      	orrs	r3, r0
 80046a2:	3401      	adds	r4, #1
 80046a4:	9304      	str	r3, [sp, #16]
 80046a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046aa:	4826      	ldr	r0, [pc, #152]	; (8004744 <_svfiprintf_r+0x1f0>)
 80046ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046b0:	2206      	movs	r2, #6
 80046b2:	f7fb fd9d 	bl	80001f0 <memchr>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d038      	beq.n	800472c <_svfiprintf_r+0x1d8>
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <_svfiprintf_r+0x1f4>)
 80046bc:	bb1b      	cbnz	r3, 8004706 <_svfiprintf_r+0x1b2>
 80046be:	9b03      	ldr	r3, [sp, #12]
 80046c0:	3307      	adds	r3, #7
 80046c2:	f023 0307 	bic.w	r3, r3, #7
 80046c6:	3308      	adds	r3, #8
 80046c8:	9303      	str	r3, [sp, #12]
 80046ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046cc:	4433      	add	r3, r6
 80046ce:	9309      	str	r3, [sp, #36]	; 0x24
 80046d0:	e767      	b.n	80045a2 <_svfiprintf_r+0x4e>
 80046d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80046d6:	460c      	mov	r4, r1
 80046d8:	2001      	movs	r0, #1
 80046da:	e7a5      	b.n	8004628 <_svfiprintf_r+0xd4>
 80046dc:	2300      	movs	r3, #0
 80046de:	3401      	adds	r4, #1
 80046e0:	9305      	str	r3, [sp, #20]
 80046e2:	4619      	mov	r1, r3
 80046e4:	f04f 0c0a 	mov.w	ip, #10
 80046e8:	4620      	mov	r0, r4
 80046ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046ee:	3a30      	subs	r2, #48	; 0x30
 80046f0:	2a09      	cmp	r2, #9
 80046f2:	d903      	bls.n	80046fc <_svfiprintf_r+0x1a8>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0c5      	beq.n	8004684 <_svfiprintf_r+0x130>
 80046f8:	9105      	str	r1, [sp, #20]
 80046fa:	e7c3      	b.n	8004684 <_svfiprintf_r+0x130>
 80046fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004700:	4604      	mov	r4, r0
 8004702:	2301      	movs	r3, #1
 8004704:	e7f0      	b.n	80046e8 <_svfiprintf_r+0x194>
 8004706:	ab03      	add	r3, sp, #12
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	462a      	mov	r2, r5
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <_svfiprintf_r+0x1f8>)
 800470e:	a904      	add	r1, sp, #16
 8004710:	4638      	mov	r0, r7
 8004712:	f3af 8000 	nop.w
 8004716:	1c42      	adds	r2, r0, #1
 8004718:	4606      	mov	r6, r0
 800471a:	d1d6      	bne.n	80046ca <_svfiprintf_r+0x176>
 800471c:	89ab      	ldrh	r3, [r5, #12]
 800471e:	065b      	lsls	r3, r3, #25
 8004720:	f53f af2c 	bmi.w	800457c <_svfiprintf_r+0x28>
 8004724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004726:	b01d      	add	sp, #116	; 0x74
 8004728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472c:	ab03      	add	r3, sp, #12
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	462a      	mov	r2, r5
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <_svfiprintf_r+0x1f8>)
 8004734:	a904      	add	r1, sp, #16
 8004736:	4638      	mov	r0, r7
 8004738:	f000 f87a 	bl	8004830 <_printf_i>
 800473c:	e7eb      	b.n	8004716 <_svfiprintf_r+0x1c2>
 800473e:	bf00      	nop
 8004740:	08004d80 	.word	0x08004d80
 8004744:	08004d8a 	.word	0x08004d8a
 8004748:	00000000 	.word	0x00000000
 800474c:	0800449d 	.word	0x0800449d
 8004750:	08004d86 	.word	0x08004d86

08004754 <_printf_common>:
 8004754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	4616      	mov	r6, r2
 800475a:	4699      	mov	r9, r3
 800475c:	688a      	ldr	r2, [r1, #8]
 800475e:	690b      	ldr	r3, [r1, #16]
 8004760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004764:	4293      	cmp	r3, r2
 8004766:	bfb8      	it	lt
 8004768:	4613      	movlt	r3, r2
 800476a:	6033      	str	r3, [r6, #0]
 800476c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004770:	4607      	mov	r7, r0
 8004772:	460c      	mov	r4, r1
 8004774:	b10a      	cbz	r2, 800477a <_printf_common+0x26>
 8004776:	3301      	adds	r3, #1
 8004778:	6033      	str	r3, [r6, #0]
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	0699      	lsls	r1, r3, #26
 800477e:	bf42      	ittt	mi
 8004780:	6833      	ldrmi	r3, [r6, #0]
 8004782:	3302      	addmi	r3, #2
 8004784:	6033      	strmi	r3, [r6, #0]
 8004786:	6825      	ldr	r5, [r4, #0]
 8004788:	f015 0506 	ands.w	r5, r5, #6
 800478c:	d106      	bne.n	800479c <_printf_common+0x48>
 800478e:	f104 0a19 	add.w	sl, r4, #25
 8004792:	68e3      	ldr	r3, [r4, #12]
 8004794:	6832      	ldr	r2, [r6, #0]
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	42ab      	cmp	r3, r5
 800479a:	dc26      	bgt.n	80047ea <_printf_common+0x96>
 800479c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047a0:	1e13      	subs	r3, r2, #0
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	bf18      	it	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	0692      	lsls	r2, r2, #26
 80047aa:	d42b      	bmi.n	8004804 <_printf_common+0xb0>
 80047ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047b0:	4649      	mov	r1, r9
 80047b2:	4638      	mov	r0, r7
 80047b4:	47c0      	blx	r8
 80047b6:	3001      	adds	r0, #1
 80047b8:	d01e      	beq.n	80047f8 <_printf_common+0xa4>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	68e5      	ldr	r5, [r4, #12]
 80047be:	6832      	ldr	r2, [r6, #0]
 80047c0:	f003 0306 	and.w	r3, r3, #6
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	bf08      	it	eq
 80047c8:	1aad      	subeq	r5, r5, r2
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	6922      	ldr	r2, [r4, #16]
 80047ce:	bf0c      	ite	eq
 80047d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047d4:	2500      	movne	r5, #0
 80047d6:	4293      	cmp	r3, r2
 80047d8:	bfc4      	itt	gt
 80047da:	1a9b      	subgt	r3, r3, r2
 80047dc:	18ed      	addgt	r5, r5, r3
 80047de:	2600      	movs	r6, #0
 80047e0:	341a      	adds	r4, #26
 80047e2:	42b5      	cmp	r5, r6
 80047e4:	d11a      	bne.n	800481c <_printf_common+0xc8>
 80047e6:	2000      	movs	r0, #0
 80047e8:	e008      	b.n	80047fc <_printf_common+0xa8>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4652      	mov	r2, sl
 80047ee:	4649      	mov	r1, r9
 80047f0:	4638      	mov	r0, r7
 80047f2:	47c0      	blx	r8
 80047f4:	3001      	adds	r0, #1
 80047f6:	d103      	bne.n	8004800 <_printf_common+0xac>
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	3501      	adds	r5, #1
 8004802:	e7c6      	b.n	8004792 <_printf_common+0x3e>
 8004804:	18e1      	adds	r1, r4, r3
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	2030      	movs	r0, #48	; 0x30
 800480a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800480e:	4422      	add	r2, r4
 8004810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004818:	3302      	adds	r3, #2
 800481a:	e7c7      	b.n	80047ac <_printf_common+0x58>
 800481c:	2301      	movs	r3, #1
 800481e:	4622      	mov	r2, r4
 8004820:	4649      	mov	r1, r9
 8004822:	4638      	mov	r0, r7
 8004824:	47c0      	blx	r8
 8004826:	3001      	adds	r0, #1
 8004828:	d0e6      	beq.n	80047f8 <_printf_common+0xa4>
 800482a:	3601      	adds	r6, #1
 800482c:	e7d9      	b.n	80047e2 <_printf_common+0x8e>
	...

08004830 <_printf_i>:
 8004830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	7e0f      	ldrb	r7, [r1, #24]
 8004836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004838:	2f78      	cmp	r7, #120	; 0x78
 800483a:	4691      	mov	r9, r2
 800483c:	4680      	mov	r8, r0
 800483e:	460c      	mov	r4, r1
 8004840:	469a      	mov	sl, r3
 8004842:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004846:	d807      	bhi.n	8004858 <_printf_i+0x28>
 8004848:	2f62      	cmp	r7, #98	; 0x62
 800484a:	d80a      	bhi.n	8004862 <_printf_i+0x32>
 800484c:	2f00      	cmp	r7, #0
 800484e:	f000 80d8 	beq.w	8004a02 <_printf_i+0x1d2>
 8004852:	2f58      	cmp	r7, #88	; 0x58
 8004854:	f000 80a3 	beq.w	800499e <_printf_i+0x16e>
 8004858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800485c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004860:	e03a      	b.n	80048d8 <_printf_i+0xa8>
 8004862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004866:	2b15      	cmp	r3, #21
 8004868:	d8f6      	bhi.n	8004858 <_printf_i+0x28>
 800486a:	a101      	add	r1, pc, #4	; (adr r1, 8004870 <_printf_i+0x40>)
 800486c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004870:	080048c9 	.word	0x080048c9
 8004874:	080048dd 	.word	0x080048dd
 8004878:	08004859 	.word	0x08004859
 800487c:	08004859 	.word	0x08004859
 8004880:	08004859 	.word	0x08004859
 8004884:	08004859 	.word	0x08004859
 8004888:	080048dd 	.word	0x080048dd
 800488c:	08004859 	.word	0x08004859
 8004890:	08004859 	.word	0x08004859
 8004894:	08004859 	.word	0x08004859
 8004898:	08004859 	.word	0x08004859
 800489c:	080049e9 	.word	0x080049e9
 80048a0:	0800490d 	.word	0x0800490d
 80048a4:	080049cb 	.word	0x080049cb
 80048a8:	08004859 	.word	0x08004859
 80048ac:	08004859 	.word	0x08004859
 80048b0:	08004a0b 	.word	0x08004a0b
 80048b4:	08004859 	.word	0x08004859
 80048b8:	0800490d 	.word	0x0800490d
 80048bc:	08004859 	.word	0x08004859
 80048c0:	08004859 	.word	0x08004859
 80048c4:	080049d3 	.word	0x080049d3
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	1d1a      	adds	r2, r3, #4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	602a      	str	r2, [r5, #0]
 80048d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048d8:	2301      	movs	r3, #1
 80048da:	e0a3      	b.n	8004a24 <_printf_i+0x1f4>
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	6829      	ldr	r1, [r5, #0]
 80048e0:	0606      	lsls	r6, r0, #24
 80048e2:	f101 0304 	add.w	r3, r1, #4
 80048e6:	d50a      	bpl.n	80048fe <_printf_i+0xce>
 80048e8:	680e      	ldr	r6, [r1, #0]
 80048ea:	602b      	str	r3, [r5, #0]
 80048ec:	2e00      	cmp	r6, #0
 80048ee:	da03      	bge.n	80048f8 <_printf_i+0xc8>
 80048f0:	232d      	movs	r3, #45	; 0x2d
 80048f2:	4276      	negs	r6, r6
 80048f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f8:	485e      	ldr	r0, [pc, #376]	; (8004a74 <_printf_i+0x244>)
 80048fa:	230a      	movs	r3, #10
 80048fc:	e019      	b.n	8004932 <_printf_i+0x102>
 80048fe:	680e      	ldr	r6, [r1, #0]
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004906:	bf18      	it	ne
 8004908:	b236      	sxthne	r6, r6
 800490a:	e7ef      	b.n	80048ec <_printf_i+0xbc>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	1d19      	adds	r1, r3, #4
 8004912:	6029      	str	r1, [r5, #0]
 8004914:	0601      	lsls	r1, r0, #24
 8004916:	d501      	bpl.n	800491c <_printf_i+0xec>
 8004918:	681e      	ldr	r6, [r3, #0]
 800491a:	e002      	b.n	8004922 <_printf_i+0xf2>
 800491c:	0646      	lsls	r6, r0, #25
 800491e:	d5fb      	bpl.n	8004918 <_printf_i+0xe8>
 8004920:	881e      	ldrh	r6, [r3, #0]
 8004922:	4854      	ldr	r0, [pc, #336]	; (8004a74 <_printf_i+0x244>)
 8004924:	2f6f      	cmp	r7, #111	; 0x6f
 8004926:	bf0c      	ite	eq
 8004928:	2308      	moveq	r3, #8
 800492a:	230a      	movne	r3, #10
 800492c:	2100      	movs	r1, #0
 800492e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004932:	6865      	ldr	r5, [r4, #4]
 8004934:	60a5      	str	r5, [r4, #8]
 8004936:	2d00      	cmp	r5, #0
 8004938:	bfa2      	ittt	ge
 800493a:	6821      	ldrge	r1, [r4, #0]
 800493c:	f021 0104 	bicge.w	r1, r1, #4
 8004940:	6021      	strge	r1, [r4, #0]
 8004942:	b90e      	cbnz	r6, 8004948 <_printf_i+0x118>
 8004944:	2d00      	cmp	r5, #0
 8004946:	d04d      	beq.n	80049e4 <_printf_i+0x1b4>
 8004948:	4615      	mov	r5, r2
 800494a:	fbb6 f1f3 	udiv	r1, r6, r3
 800494e:	fb03 6711 	mls	r7, r3, r1, r6
 8004952:	5dc7      	ldrb	r7, [r0, r7]
 8004954:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004958:	4637      	mov	r7, r6
 800495a:	42bb      	cmp	r3, r7
 800495c:	460e      	mov	r6, r1
 800495e:	d9f4      	bls.n	800494a <_printf_i+0x11a>
 8004960:	2b08      	cmp	r3, #8
 8004962:	d10b      	bne.n	800497c <_printf_i+0x14c>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	07de      	lsls	r6, r3, #31
 8004968:	d508      	bpl.n	800497c <_printf_i+0x14c>
 800496a:	6923      	ldr	r3, [r4, #16]
 800496c:	6861      	ldr	r1, [r4, #4]
 800496e:	4299      	cmp	r1, r3
 8004970:	bfde      	ittt	le
 8004972:	2330      	movle	r3, #48	; 0x30
 8004974:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004978:	f105 35ff 	addle.w	r5, r5, #4294967295
 800497c:	1b52      	subs	r2, r2, r5
 800497e:	6122      	str	r2, [r4, #16]
 8004980:	f8cd a000 	str.w	sl, [sp]
 8004984:	464b      	mov	r3, r9
 8004986:	aa03      	add	r2, sp, #12
 8004988:	4621      	mov	r1, r4
 800498a:	4640      	mov	r0, r8
 800498c:	f7ff fee2 	bl	8004754 <_printf_common>
 8004990:	3001      	adds	r0, #1
 8004992:	d14c      	bne.n	8004a2e <_printf_i+0x1fe>
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	b004      	add	sp, #16
 800499a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499e:	4835      	ldr	r0, [pc, #212]	; (8004a74 <_printf_i+0x244>)
 80049a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049a4:	6829      	ldr	r1, [r5, #0]
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80049ac:	6029      	str	r1, [r5, #0]
 80049ae:	061d      	lsls	r5, r3, #24
 80049b0:	d514      	bpl.n	80049dc <_printf_i+0x1ac>
 80049b2:	07df      	lsls	r7, r3, #31
 80049b4:	bf44      	itt	mi
 80049b6:	f043 0320 	orrmi.w	r3, r3, #32
 80049ba:	6023      	strmi	r3, [r4, #0]
 80049bc:	b91e      	cbnz	r6, 80049c6 <_printf_i+0x196>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	f023 0320 	bic.w	r3, r3, #32
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	2310      	movs	r3, #16
 80049c8:	e7b0      	b.n	800492c <_printf_i+0xfc>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	f043 0320 	orr.w	r3, r3, #32
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	2378      	movs	r3, #120	; 0x78
 80049d4:	4828      	ldr	r0, [pc, #160]	; (8004a78 <_printf_i+0x248>)
 80049d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049da:	e7e3      	b.n	80049a4 <_printf_i+0x174>
 80049dc:	0659      	lsls	r1, r3, #25
 80049de:	bf48      	it	mi
 80049e0:	b2b6      	uxthmi	r6, r6
 80049e2:	e7e6      	b.n	80049b2 <_printf_i+0x182>
 80049e4:	4615      	mov	r5, r2
 80049e6:	e7bb      	b.n	8004960 <_printf_i+0x130>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	6826      	ldr	r6, [r4, #0]
 80049ec:	6961      	ldr	r1, [r4, #20]
 80049ee:	1d18      	adds	r0, r3, #4
 80049f0:	6028      	str	r0, [r5, #0]
 80049f2:	0635      	lsls	r5, r6, #24
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	d501      	bpl.n	80049fc <_printf_i+0x1cc>
 80049f8:	6019      	str	r1, [r3, #0]
 80049fa:	e002      	b.n	8004a02 <_printf_i+0x1d2>
 80049fc:	0670      	lsls	r0, r6, #25
 80049fe:	d5fb      	bpl.n	80049f8 <_printf_i+0x1c8>
 8004a00:	8019      	strh	r1, [r3, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	6123      	str	r3, [r4, #16]
 8004a06:	4615      	mov	r5, r2
 8004a08:	e7ba      	b.n	8004980 <_printf_i+0x150>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	1d1a      	adds	r2, r3, #4
 8004a0e:	602a      	str	r2, [r5, #0]
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	6862      	ldr	r2, [r4, #4]
 8004a14:	2100      	movs	r1, #0
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7fb fbea 	bl	80001f0 <memchr>
 8004a1c:	b108      	cbz	r0, 8004a22 <_printf_i+0x1f2>
 8004a1e:	1b40      	subs	r0, r0, r5
 8004a20:	6060      	str	r0, [r4, #4]
 8004a22:	6863      	ldr	r3, [r4, #4]
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	2300      	movs	r3, #0
 8004a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2c:	e7a8      	b.n	8004980 <_printf_i+0x150>
 8004a2e:	6923      	ldr	r3, [r4, #16]
 8004a30:	462a      	mov	r2, r5
 8004a32:	4649      	mov	r1, r9
 8004a34:	4640      	mov	r0, r8
 8004a36:	47d0      	blx	sl
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d0ab      	beq.n	8004994 <_printf_i+0x164>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	079b      	lsls	r3, r3, #30
 8004a40:	d413      	bmi.n	8004a6a <_printf_i+0x23a>
 8004a42:	68e0      	ldr	r0, [r4, #12]
 8004a44:	9b03      	ldr	r3, [sp, #12]
 8004a46:	4298      	cmp	r0, r3
 8004a48:	bfb8      	it	lt
 8004a4a:	4618      	movlt	r0, r3
 8004a4c:	e7a4      	b.n	8004998 <_printf_i+0x168>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4632      	mov	r2, r6
 8004a52:	4649      	mov	r1, r9
 8004a54:	4640      	mov	r0, r8
 8004a56:	47d0      	blx	sl
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d09b      	beq.n	8004994 <_printf_i+0x164>
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	68e3      	ldr	r3, [r4, #12]
 8004a60:	9903      	ldr	r1, [sp, #12]
 8004a62:	1a5b      	subs	r3, r3, r1
 8004a64:	42ab      	cmp	r3, r5
 8004a66:	dcf2      	bgt.n	8004a4e <_printf_i+0x21e>
 8004a68:	e7eb      	b.n	8004a42 <_printf_i+0x212>
 8004a6a:	2500      	movs	r5, #0
 8004a6c:	f104 0619 	add.w	r6, r4, #25
 8004a70:	e7f5      	b.n	8004a5e <_printf_i+0x22e>
 8004a72:	bf00      	nop
 8004a74:	08004d91 	.word	0x08004d91
 8004a78:	08004da2 	.word	0x08004da2

08004a7c <memcpy>:
 8004a7c:	440a      	add	r2, r1
 8004a7e:	4291      	cmp	r1, r2
 8004a80:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a84:	d100      	bne.n	8004a88 <memcpy+0xc>
 8004a86:	4770      	bx	lr
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a92:	4291      	cmp	r1, r2
 8004a94:	d1f9      	bne.n	8004a8a <memcpy+0xe>
 8004a96:	bd10      	pop	{r4, pc}

08004a98 <memmove>:
 8004a98:	4288      	cmp	r0, r1
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	eb01 0402 	add.w	r4, r1, r2
 8004aa0:	d902      	bls.n	8004aa8 <memmove+0x10>
 8004aa2:	4284      	cmp	r4, r0
 8004aa4:	4623      	mov	r3, r4
 8004aa6:	d807      	bhi.n	8004ab8 <memmove+0x20>
 8004aa8:	1e43      	subs	r3, r0, #1
 8004aaa:	42a1      	cmp	r1, r4
 8004aac:	d008      	beq.n	8004ac0 <memmove+0x28>
 8004aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ab6:	e7f8      	b.n	8004aaa <memmove+0x12>
 8004ab8:	4402      	add	r2, r0
 8004aba:	4601      	mov	r1, r0
 8004abc:	428a      	cmp	r2, r1
 8004abe:	d100      	bne.n	8004ac2 <memmove+0x2a>
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aca:	e7f7      	b.n	8004abc <memmove+0x24>

08004acc <_free_r>:
 8004acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ace:	2900      	cmp	r1, #0
 8004ad0:	d044      	beq.n	8004b5c <_free_r+0x90>
 8004ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad6:	9001      	str	r0, [sp, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f1a1 0404 	sub.w	r4, r1, #4
 8004ade:	bfb8      	it	lt
 8004ae0:	18e4      	addlt	r4, r4, r3
 8004ae2:	f000 f913 	bl	8004d0c <__malloc_lock>
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <_free_r+0x94>)
 8004ae8:	9801      	ldr	r0, [sp, #4]
 8004aea:	6813      	ldr	r3, [r2, #0]
 8004aec:	b933      	cbnz	r3, 8004afc <_free_r+0x30>
 8004aee:	6063      	str	r3, [r4, #4]
 8004af0:	6014      	str	r4, [r2, #0]
 8004af2:	b003      	add	sp, #12
 8004af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004af8:	f000 b90e 	b.w	8004d18 <__malloc_unlock>
 8004afc:	42a3      	cmp	r3, r4
 8004afe:	d908      	bls.n	8004b12 <_free_r+0x46>
 8004b00:	6825      	ldr	r5, [r4, #0]
 8004b02:	1961      	adds	r1, r4, r5
 8004b04:	428b      	cmp	r3, r1
 8004b06:	bf01      	itttt	eq
 8004b08:	6819      	ldreq	r1, [r3, #0]
 8004b0a:	685b      	ldreq	r3, [r3, #4]
 8004b0c:	1949      	addeq	r1, r1, r5
 8004b0e:	6021      	streq	r1, [r4, #0]
 8004b10:	e7ed      	b.n	8004aee <_free_r+0x22>
 8004b12:	461a      	mov	r2, r3
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	b10b      	cbz	r3, 8004b1c <_free_r+0x50>
 8004b18:	42a3      	cmp	r3, r4
 8004b1a:	d9fa      	bls.n	8004b12 <_free_r+0x46>
 8004b1c:	6811      	ldr	r1, [r2, #0]
 8004b1e:	1855      	adds	r5, r2, r1
 8004b20:	42a5      	cmp	r5, r4
 8004b22:	d10b      	bne.n	8004b3c <_free_r+0x70>
 8004b24:	6824      	ldr	r4, [r4, #0]
 8004b26:	4421      	add	r1, r4
 8004b28:	1854      	adds	r4, r2, r1
 8004b2a:	42a3      	cmp	r3, r4
 8004b2c:	6011      	str	r1, [r2, #0]
 8004b2e:	d1e0      	bne.n	8004af2 <_free_r+0x26>
 8004b30:	681c      	ldr	r4, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	6053      	str	r3, [r2, #4]
 8004b36:	4421      	add	r1, r4
 8004b38:	6011      	str	r1, [r2, #0]
 8004b3a:	e7da      	b.n	8004af2 <_free_r+0x26>
 8004b3c:	d902      	bls.n	8004b44 <_free_r+0x78>
 8004b3e:	230c      	movs	r3, #12
 8004b40:	6003      	str	r3, [r0, #0]
 8004b42:	e7d6      	b.n	8004af2 <_free_r+0x26>
 8004b44:	6825      	ldr	r5, [r4, #0]
 8004b46:	1961      	adds	r1, r4, r5
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	bf04      	itt	eq
 8004b4c:	6819      	ldreq	r1, [r3, #0]
 8004b4e:	685b      	ldreq	r3, [r3, #4]
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	bf04      	itt	eq
 8004b54:	1949      	addeq	r1, r1, r5
 8004b56:	6021      	streq	r1, [r4, #0]
 8004b58:	6054      	str	r4, [r2, #4]
 8004b5a:	e7ca      	b.n	8004af2 <_free_r+0x26>
 8004b5c:	b003      	add	sp, #12
 8004b5e:	bd30      	pop	{r4, r5, pc}
 8004b60:	200001b0 	.word	0x200001b0

08004b64 <sbrk_aligned>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	4e0e      	ldr	r6, [pc, #56]	; (8004ba0 <sbrk_aligned+0x3c>)
 8004b68:	460c      	mov	r4, r1
 8004b6a:	6831      	ldr	r1, [r6, #0]
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	b911      	cbnz	r1, 8004b76 <sbrk_aligned+0x12>
 8004b70:	f000 f8bc 	bl	8004cec <_sbrk_r>
 8004b74:	6030      	str	r0, [r6, #0]
 8004b76:	4621      	mov	r1, r4
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f000 f8b7 	bl	8004cec <_sbrk_r>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	d00a      	beq.n	8004b98 <sbrk_aligned+0x34>
 8004b82:	1cc4      	adds	r4, r0, #3
 8004b84:	f024 0403 	bic.w	r4, r4, #3
 8004b88:	42a0      	cmp	r0, r4
 8004b8a:	d007      	beq.n	8004b9c <sbrk_aligned+0x38>
 8004b8c:	1a21      	subs	r1, r4, r0
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f000 f8ac 	bl	8004cec <_sbrk_r>
 8004b94:	3001      	adds	r0, #1
 8004b96:	d101      	bne.n	8004b9c <sbrk_aligned+0x38>
 8004b98:	f04f 34ff 	mov.w	r4, #4294967295
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	200001b4 	.word	0x200001b4

08004ba4 <_malloc_r>:
 8004ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba8:	1ccd      	adds	r5, r1, #3
 8004baa:	f025 0503 	bic.w	r5, r5, #3
 8004bae:	3508      	adds	r5, #8
 8004bb0:	2d0c      	cmp	r5, #12
 8004bb2:	bf38      	it	cc
 8004bb4:	250c      	movcc	r5, #12
 8004bb6:	2d00      	cmp	r5, #0
 8004bb8:	4607      	mov	r7, r0
 8004bba:	db01      	blt.n	8004bc0 <_malloc_r+0x1c>
 8004bbc:	42a9      	cmp	r1, r5
 8004bbe:	d905      	bls.n	8004bcc <_malloc_r+0x28>
 8004bc0:	230c      	movs	r3, #12
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	2600      	movs	r6, #0
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bcc:	4e2e      	ldr	r6, [pc, #184]	; (8004c88 <_malloc_r+0xe4>)
 8004bce:	f000 f89d 	bl	8004d0c <__malloc_lock>
 8004bd2:	6833      	ldr	r3, [r6, #0]
 8004bd4:	461c      	mov	r4, r3
 8004bd6:	bb34      	cbnz	r4, 8004c26 <_malloc_r+0x82>
 8004bd8:	4629      	mov	r1, r5
 8004bda:	4638      	mov	r0, r7
 8004bdc:	f7ff ffc2 	bl	8004b64 <sbrk_aligned>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	4604      	mov	r4, r0
 8004be4:	d14d      	bne.n	8004c82 <_malloc_r+0xde>
 8004be6:	6834      	ldr	r4, [r6, #0]
 8004be8:	4626      	mov	r6, r4
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	d140      	bne.n	8004c70 <_malloc_r+0xcc>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	eb04 0803 	add.w	r8, r4, r3
 8004bf8:	f000 f878 	bl	8004cec <_sbrk_r>
 8004bfc:	4580      	cmp	r8, r0
 8004bfe:	d13a      	bne.n	8004c76 <_malloc_r+0xd2>
 8004c00:	6821      	ldr	r1, [r4, #0]
 8004c02:	3503      	adds	r5, #3
 8004c04:	1a6d      	subs	r5, r5, r1
 8004c06:	f025 0503 	bic.w	r5, r5, #3
 8004c0a:	3508      	adds	r5, #8
 8004c0c:	2d0c      	cmp	r5, #12
 8004c0e:	bf38      	it	cc
 8004c10:	250c      	movcc	r5, #12
 8004c12:	4629      	mov	r1, r5
 8004c14:	4638      	mov	r0, r7
 8004c16:	f7ff ffa5 	bl	8004b64 <sbrk_aligned>
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d02b      	beq.n	8004c76 <_malloc_r+0xd2>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	442b      	add	r3, r5
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	e00e      	b.n	8004c44 <_malloc_r+0xa0>
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	1b52      	subs	r2, r2, r5
 8004c2a:	d41e      	bmi.n	8004c6a <_malloc_r+0xc6>
 8004c2c:	2a0b      	cmp	r2, #11
 8004c2e:	d916      	bls.n	8004c5e <_malloc_r+0xba>
 8004c30:	1961      	adds	r1, r4, r5
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	6025      	str	r5, [r4, #0]
 8004c36:	bf18      	it	ne
 8004c38:	6059      	strne	r1, [r3, #4]
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	bf08      	it	eq
 8004c3e:	6031      	streq	r1, [r6, #0]
 8004c40:	5162      	str	r2, [r4, r5]
 8004c42:	604b      	str	r3, [r1, #4]
 8004c44:	4638      	mov	r0, r7
 8004c46:	f104 060b 	add.w	r6, r4, #11
 8004c4a:	f000 f865 	bl	8004d18 <__malloc_unlock>
 8004c4e:	f026 0607 	bic.w	r6, r6, #7
 8004c52:	1d23      	adds	r3, r4, #4
 8004c54:	1af2      	subs	r2, r6, r3
 8004c56:	d0b6      	beq.n	8004bc6 <_malloc_r+0x22>
 8004c58:	1b9b      	subs	r3, r3, r6
 8004c5a:	50a3      	str	r3, [r4, r2]
 8004c5c:	e7b3      	b.n	8004bc6 <_malloc_r+0x22>
 8004c5e:	6862      	ldr	r2, [r4, #4]
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	bf0c      	ite	eq
 8004c64:	6032      	streq	r2, [r6, #0]
 8004c66:	605a      	strne	r2, [r3, #4]
 8004c68:	e7ec      	b.n	8004c44 <_malloc_r+0xa0>
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	6864      	ldr	r4, [r4, #4]
 8004c6e:	e7b2      	b.n	8004bd6 <_malloc_r+0x32>
 8004c70:	4634      	mov	r4, r6
 8004c72:	6876      	ldr	r6, [r6, #4]
 8004c74:	e7b9      	b.n	8004bea <_malloc_r+0x46>
 8004c76:	230c      	movs	r3, #12
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	f000 f84c 	bl	8004d18 <__malloc_unlock>
 8004c80:	e7a1      	b.n	8004bc6 <_malloc_r+0x22>
 8004c82:	6025      	str	r5, [r4, #0]
 8004c84:	e7de      	b.n	8004c44 <_malloc_r+0xa0>
 8004c86:	bf00      	nop
 8004c88:	200001b0 	.word	0x200001b0

08004c8c <_realloc_r>:
 8004c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c90:	4680      	mov	r8, r0
 8004c92:	4614      	mov	r4, r2
 8004c94:	460e      	mov	r6, r1
 8004c96:	b921      	cbnz	r1, 8004ca2 <_realloc_r+0x16>
 8004c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	f7ff bf81 	b.w	8004ba4 <_malloc_r>
 8004ca2:	b92a      	cbnz	r2, 8004cb0 <_realloc_r+0x24>
 8004ca4:	f7ff ff12 	bl	8004acc <_free_r>
 8004ca8:	4625      	mov	r5, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb0:	f000 f838 	bl	8004d24 <_malloc_usable_size_r>
 8004cb4:	4284      	cmp	r4, r0
 8004cb6:	4607      	mov	r7, r0
 8004cb8:	d802      	bhi.n	8004cc0 <_realloc_r+0x34>
 8004cba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cbe:	d812      	bhi.n	8004ce6 <_realloc_r+0x5a>
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	f7ff ff6e 	bl	8004ba4 <_malloc_r>
 8004cc8:	4605      	mov	r5, r0
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d0ed      	beq.n	8004caa <_realloc_r+0x1e>
 8004cce:	42bc      	cmp	r4, r7
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	bf28      	it	cs
 8004cd6:	463a      	movcs	r2, r7
 8004cd8:	f7ff fed0 	bl	8004a7c <memcpy>
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4640      	mov	r0, r8
 8004ce0:	f7ff fef4 	bl	8004acc <_free_r>
 8004ce4:	e7e1      	b.n	8004caa <_realloc_r+0x1e>
 8004ce6:	4635      	mov	r5, r6
 8004ce8:	e7df      	b.n	8004caa <_realloc_r+0x1e>
	...

08004cec <_sbrk_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4d06      	ldr	r5, [pc, #24]	; (8004d08 <_sbrk_r+0x1c>)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	602b      	str	r3, [r5, #0]
 8004cf8:	f7fb ff72 	bl	8000be0 <_sbrk>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_sbrk_r+0x1a>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_sbrk_r+0x1a>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	200001b8 	.word	0x200001b8

08004d0c <__malloc_lock>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <__malloc_lock+0x8>)
 8004d0e:	f000 b811 	b.w	8004d34 <__retarget_lock_acquire_recursive>
 8004d12:	bf00      	nop
 8004d14:	200001bc 	.word	0x200001bc

08004d18 <__malloc_unlock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__malloc_unlock+0x8>)
 8004d1a:	f000 b80c 	b.w	8004d36 <__retarget_lock_release_recursive>
 8004d1e:	bf00      	nop
 8004d20:	200001bc 	.word	0x200001bc

08004d24 <_malloc_usable_size_r>:
 8004d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d28:	1f18      	subs	r0, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bfbc      	itt	lt
 8004d2e:	580b      	ldrlt	r3, [r1, r0]
 8004d30:	18c0      	addlt	r0, r0, r3
 8004d32:	4770      	bx	lr

08004d34 <__retarget_lock_acquire_recursive>:
 8004d34:	4770      	bx	lr

08004d36 <__retarget_lock_release_recursive>:
 8004d36:	4770      	bx	lr

08004d38 <_init>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr

08004d44 <_fini>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr
